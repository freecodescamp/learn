{"id":1130,"date":"2021-04-14T08:19:33","date_gmt":"2021-04-14T08:19:33","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=1130"},"modified":"2021-10-12T01:12:59","modified_gmt":"2021-10-12T01:12:59","slug":"php-filter_var","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-filter_var\/","title":{"rendered":"PHP filter_var"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the PHP <code>filter_var()<\/code> function to sanitize and validate data.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP filter_var() function<\/h2>\n\n\n\n<p>When dealing with external data, you need to sanitize and validate it for security purposes. The external data may come from user inputs or third-party API. <\/p>\n\n\n\n<p>A good rule of thumb is that you should never trust external data. And you should always:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>Sanitize and validate data before storing it in the database.<\/li><li><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-htmlspecialchars\/\">Espace data <\/a>before displaying it on a web page.<\/li><\/ul>\n\n\n\n<p>Suppose, you have a URL that contains a query string like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">http:&#47;&#47;localhost:8080\/index.php?id=10<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And you want to display the <code>$id<\/code> on the page:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">echo<\/span> $_GET&#91;<span class=\"hljs-string\">'id'<\/span>];<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this case, you see that the page displays the number 10.<\/p>\n\n\n\n<p>However, a malicious hacker may change the value of <code>id<\/code> to something code like this:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">%3Cscript%3Ealert(%27Hi%27)%3C\/script%3E<\/code><\/span><\/pre>\n\n\n<p>And the URL will be:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">http:<span class=\"hljs-comment\">\/\/localhost:8080\/phptutorial\/filter_var\/index.php?id=%3Cscript%3Ealert(%27Hi%27)%3C\/script%3E<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this case, you&#8217;ll see an alert on the web browser instead. In this example, the value of id is not a number but a <a href=\"https:\/\/www.javascripttutorial.net\/javascript-bom\/javascript-alert\/\" target=\"_blank\" rel=\"noreferrer noopener\">piece of JavaScript code that shows an alert<\/a>.<\/p>\n\n\n\n<p>Imagine the following situation:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>First, a hacker creates a link to the page on a legitimate domain (<code>https:\/\/www.mybank.com\/login\/?id=...<\/code>). with an id that contains malicious code instead of a valid number. And unfortunately, the page doesn&#8217;t sanitize and validate the input.<\/li><li>Second, the hacker embeds the link in an email and sends it to the users of the <code>mybank.com<\/code>.<\/li><li>Third, the users see the link with a legitimate domain and click it. When they arrive at the page, they&#8217;re redirected to the hacker&#8217;s website with the same look and feel (<code>https:\/\/www.mybank.on-a-malicious-domain.com\/login\/<\/code>).<\/li><li>Finally, users enter their accounts and lose the bank credentials to the hacker.<\/li><\/ul>\n\n\n\n<p>To prevent this, you need to sanitize and validate data before processing it.<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li><strong>Sanitization <\/strong>disables potential malicious code from data before processing it. <\/li><li><strong>Validation <\/strong>ensures that the data is in the correct format regarding data type, range, and value.<\/li><\/ul>\n\n\n\n<p>PHP has the <code>filter_var()<\/code> function that supports you to both sanitize and validate data. Here&#8217;s the syntax of the <code>filter_var()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">filter_var ( mixed $value , int $filter = FILTER_DEFAULT , <span class=\"hljs-keyword\">array<\/span>|int $options = <span class=\"hljs-number\">0<\/span> ) : mixed<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>filter_var()<\/code> function the following parameters:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li><code>$value<\/code> is the value will be filtered.<\/li><li><code>$filter<\/code> is the filter id to apply. The filter id determines how the <code>filter_var()<\/code> function filters the <code>$value<\/code>.<\/li><li><code>$options<\/code> is an associative array of options or a list of flags separated by the pipe character (<code>|<\/code>). <\/li><\/ul>\n\n\n\n<p>The <code>filter()<\/code> function returns the filtered value, or <code>false<\/code> if the filter fails.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">PHP filter_var() function example<\/h2>\n\n\n\n<p>Let&#8217;s take an example of using the <code>filter_var()<\/code> function.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">1) Using the PHP filter_var() function to sanitize data<\/h3>\n\n\n\n<p>The following example uses the <code>filter_var()<\/code> function to sanitize the id of a query string:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">if<\/span> (filter_has_var(INPUT_GET, <span class=\"hljs-string\">'id'<\/span>)) {\n\t<span class=\"hljs-comment\">\/\/ sanitize id<\/span>\n\t$id = filter_var($_GET&#91;<span class=\"hljs-string\">'id'<\/span>], FILTER_SANITIZE_NUMBER_INT);\n\t<span class=\"hljs-comment\">\/\/ show the id<\/span>\n\tvar_dump($id);\n} <span class=\"hljs-keyword\">else<\/span> {\n\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'id is required.'<\/span>;\n}\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that the <code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-filter_has_var\/\">filter_has_var()<\/a><\/code> function returns <code>true<\/code> if the query string contains the <code>id<\/code> parameter.<\/p>\n\n\n\n<p>If you navigate to the URL:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">http:<span class=\"hljs-comment\">\/\/localhost:8080\/index.php?id=10<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>you&#8217;ll see the following value:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">string(<span class=\"hljs-number\">2<\/span>) <span class=\"hljs-string\">\"10\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, if you use the following link that has an id with malicious code:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">http:<span class=\"hljs-comment\">\/\/localhost:8080\/index.php?id=%3Cscript%3Ealert(%27Hi%27)%3C\/script%3E<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>you&#8217;ll see the following:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">string(<span class=\"hljs-number\">0<\/span>) <span class=\"hljs-string\">\"\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>filter_var()<\/code> function with the <code>FILTER_SANITIZE_NUMBER_INT<\/code> filters will remove all characters except the digits, plus, and minus signs from the <code>id<\/code> variable. Check out <a href=\"https:\/\/www.php.net\/manual\/en\/filter.filters.sanitize.php\" target=\"_blank\" rel=\"noreferrer noopener\">all the filter ids<\/a> that you can use to sanitize data.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">2) Using the PHP filter_var() function to validate data<\/h3>\n\n\n\n<p>Besides sanitizing data, you can use the <code>filter_var()<\/code> function to validate data. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">if<\/span> (filter_has_var(INPUT_GET, <span class=\"hljs-string\">'id'<\/span>)) {\n\t<span class=\"hljs-comment\">\/\/ sanitize id<\/span>\n\t$clean_id = filter_var($_GET&#91;<span class=\"hljs-string\">'id'<\/span>], FILTER_SANITIZE_NUMBER_INT);\n\n\t<span class=\"hljs-comment\">\/\/ validate id<\/span>\n\t$id = filter_var($clean_id, FILTER_VALIDATE_INT);\n\n\t<span class=\"hljs-comment\">\/\/ show the id if it's valid<\/span>\n\t<span class=\"hljs-keyword\">echo<\/span> $id === <span class=\"hljs-keyword\">false<\/span> ? <span class=\"hljs-string\">'Invalid id'<\/span> : $id;\n} <span class=\"hljs-keyword\">else<\/span> {\n\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'id is required.'<\/span>;\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we pass the <code>id<\/code> from the <code>$_GET<\/code> array to the <code>filter_var()<\/code> function and use the filter id <code>FILTER_VALIDATE_INT<\/code> to validate whether <code>$_GET['id']<\/code> is an integer or not.<\/p>\n\n\n\n<p>If the result is <code>false<\/code>, then it shows the message <code>'Invalid id'<\/code>. Otherwise, it <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-var_dump\/\">dumps<\/a> the value of id.<\/p>\n\n\n\n<p>If the <code>id<\/code> is an integer, for example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">http:<span class=\"hljs-comment\">\/\/localhost:8080\/index.php?id=10<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>&#8230;you&#8217;ll see the following value on the screen:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">10<\/code><\/span><\/pre>\n\n\n<p>Notice that the <code>filter_var()<\/code> function implicitly converts the string &#8216;<code>10'<\/code> to the integer <code>10<\/code>.<\/p>\n\n\n\n<p>If the value of the <code>id<\/code> is anything other than an integer, you&#8217;ll see the message:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Invalid id<\/code><\/span><\/pre>\n\n\n<p>Some filter ids support the additional options. For example, the <code>FILTER_VALIDATE_INT<\/code> allows you to specify the min range, max range, and default value when the filter fails.<\/p>\n\n\n\n<p>To make sure that the value of <code>id<\/code> is greater than10, you use the <code>$options<\/code> argument in the <code>filter_var()<\/code> function as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">if<\/span> (filter_has_var(INPUT_GET, <span class=\"hljs-string\">'id'<\/span>)) {\n    <span class=\"hljs-comment\">\/\/ sanitize id<\/span>\n    $clean_id = filter_var($_GET&#91;<span class=\"hljs-string\">'id'<\/span>], FILTER_SANITIZE_NUMBER_INT);\n\n    <span class=\"hljs-keyword\">if<\/span> ($clean_id) {\n        <span class=\"hljs-comment\">\/\/ validate id with options<\/span>\n        $id = filter_var($clean_id, FILTER_VALIDATE_INT, &#91;<span class=\"hljs-string\">'options'<\/span> =&gt; &#91;\n            <span class=\"hljs-string\">'min_range'<\/span> =&gt; <span class=\"hljs-number\">10<\/span>\n        ]]);\n\n        <span class=\"hljs-comment\">\/\/ show the id if it's valid<\/span>\n        <span class=\"hljs-keyword\">echo<\/span> $id === <span class=\"hljs-keyword\">false<\/span> ? <span class=\"hljs-string\">'id must be at least 10'<\/span> : $id;\n    }\n    <span class=\"hljs-keyword\">else<\/span> {\n         <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'id is invalid.'<\/span>;\n    }\n} <span class=\"hljs-keyword\">else<\/span> {\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'id is required.'<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you don&#8217;t have the id in the query string, you&#8217;ll get the following error:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">id is required.<\/code><\/span><\/pre>\n\n\n<p>If you have an id that is not an integer like the following:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">index.php?id=abc<\/code><\/span><\/pre>\n\n\n<p>&#8230; you&#8217;ll get the following error:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">id is invalid.<\/code><\/span><\/pre>\n\n\n<p>However, if you have an id with the value that cannot be converted to an integer like this:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">index.php?id=123abc<\/code><\/span><\/pre>\n\n\n<p>&#8230;you&#8217;ll get the id with the value <code>123<\/code> because the <code>FILTER_SANITIZE_NUMBER_INT<\/code> filter removes the <code>abc<\/code> characters from the id.<\/p>\n\n\n\n<p>If you have an id with a value less than 10:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">index.php?id=9<\/code><\/span><\/pre>\n\n\n<p>&#8230; you&#8217;ll get the following message:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">id must be at least 10<\/code><\/span><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>External data cannot be trusted. Therefore, you should always sanitize and validate the external data.<\/li><li>Use the PHP <code>filter_var()<\/code> function to sanitize and validate data.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1130\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-filter_var\/\"\n\t\t\t\tdata-post-title=\"PHP filter_var\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1130\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-filter_var\/\"\n\t\t\t\tdata-post-title=\"PHP filter_var\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to use the PHP filter_var() function to sanitize and validate data.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":85,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-1130","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1130","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=1130"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1130\/revisions"}],"predecessor-version":[{"id":2800,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1130\/revisions\/2800"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=1130"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}