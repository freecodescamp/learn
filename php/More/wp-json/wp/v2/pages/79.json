{"id":79,"date":"2021-03-08T00:14:20","date_gmt":"2021-03-08T00:14:20","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=79"},"modified":"2021-09-05T08:13:41","modified_gmt":"2021-09-05T08:13:41","slug":"php-form","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-form\/","title":{"rendered":"PHP Form"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how HTML forms work and how to process form data in PHP.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to PHP form processing<\/h2>\n\n\n\n<p>To create a form, you use the <code>&lt;form&gt;<\/code> element as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form<\/span> <span class=\"hljs-attr\">action<\/span>=<span class=\"hljs-string\">\"form.php\"<\/span> <span class=\"hljs-attr\">method<\/span>=<span class=\"hljs-string\">\"post\"<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">form<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>&lt;form&gt;<\/code> element has two important attributes:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li><code>action<\/code>: specifies the URL that processes the form submission. In this example, the <code>form.php<\/code> will process the form.<\/li><li><code>method<\/code>: specifies the HTTP method for submitting the form. The most commonly used form methods are <code>POST<\/code> and <code>GET<\/code>. In this example, the form method is <code>post<\/code>.<\/li><\/ul>\n\n\n\n<p>The form method is case-insensitive. It means that you can use either <code>post<\/code> or <code>POST<\/code>. If you don&#8217;t specify the method attribute, the form element will use the <code>get<\/code> method by default.<\/p>\n\n\n\n<p>Typically, a form has one or more input elements including text, password, <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-checkbox\/\">checkbox<\/a>, <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-radio-button\/\">radio button<\/a>, <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-select-option\/\">select<\/a>, <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-file-upload\/\">file upload<\/a>, etc. The input elements are often called form fields.<\/p>\n\n\n\n<p>An input element has the following important attributes <code>name<\/code>, <code>type<\/code>, and <code>value<\/code>. The <code>name<\/code> attribute will be used for accessing the <code>value<\/code> in PHP. <\/p>\n\n\n\n<h3 class=\"wp-block-heading\">HTTP POST method<\/h3>\n\n\n\n<p>If a form uses the <code>POST<\/code> method, the web browser will include the form data in the HTTP request&#8217;s body. After submitting the form, you can access the form data via the <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-associative-arrays\/\">associative array<\/a> <code>$_POST<\/code> in PHP.<\/p>\n\n\n\n<p>For example, if a form has an input element with the name <code>email<\/code>, you can access the email value in PHP via the <code>$_POST['email']<\/code>. If the form doesn&#8217;t have an email input, the <code>$_POST<\/code> won&#8217;t have any element with the key <code>'email'<\/code>. <\/p>\n\n\n\n<p>To check if the form data contains the email, you use the <code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-isset\/\">isset()<\/a><\/code> like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">if<\/span>(<span class=\"hljs-keyword\">isset<\/span>($_POST&#91;<span class=\"hljs-string\">'email'<\/span>]) {\n    <span class=\"hljs-comment\">\/\/ process email<\/span>\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following shows a form with an input element:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form<\/span> <span class=\"hljs-attr\">action<\/span>=<span class=\"hljs-string\">\"form.php\"<\/span> <span class=\"hljs-attr\">method<\/span>=<span class=\"hljs-string\">\"post\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label<\/span> <span class=\"hljs-attr\">for<\/span>=<span class=\"hljs-string\">\"email\"<\/span>&gt;<\/span>Email:<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">label<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"email\"<\/span> <span class=\"hljs-attr\">id<\/span>=<span class=\"hljs-string\">\"email\"<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"email\"<\/span> \/&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"submit\"<\/span>&gt;<\/span>Submit<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">button<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">form<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the <code>form.php<\/code> file, you can access the email value as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">isset<\/span>($_POST&#91;<span class=\"hljs-string\">'email'<\/span>])) {\n\tvar_dump($_POST&#91;<span class=\"hljs-string\">'email'<\/span>]);\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">HTTP GET method<\/h3>\n\n\n\n<p>When you submit a form using the <code>GET<\/code> method, you can access the form data in PHP via the associative array <code>$_GET<\/code>.<\/p>\n\n\n\n<p>Unlike the <code>POST<\/code> method, the <code>GET<\/code> method appends the form data in the URL that processes the form. Suppose the URL that processes the form is <code>http:\/\/localhost\/form.php<\/code>. When you enter the email as <code>hello@CodeCamp<\/code> and submit a form, you&#8217;ll see that the email value is appended to the URL like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">http:&#47;&#47;localhost\/form.php?email=hello%40CodeCamp<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p class=\"note\">Note that the @ is encoded as %40 in the URL.<\/p>\n\n\n\n<p>In PHP, you can use the <code>isset()<\/code> to check if the form data contains the email:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">if<\/span>(<span class=\"hljs-keyword\">isset<\/span>($_GET&#91;<span class=\"hljs-string\">'email'<\/span>]) {\n    <span class=\"hljs-comment\">\/\/ process email<\/span>\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If the form has multiple input elements, the web browser will append the form inputs to the URL in the following format:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">http:&#47;&#47;localhost\/form.php?name1=value1&amp;name2=value2&amp;name3=value3<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following shows the same form that has an email input. However, the form uses the GET method instead:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form<\/span> <span class=\"hljs-attr\">action<\/span>=<span class=\"hljs-string\">\"form.php\"<\/span> <span class=\"hljs-attr\">method<\/span>=<span class=\"hljs-string\">\"get\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label<\/span> <span class=\"hljs-attr\">for<\/span>=<span class=\"hljs-string\">\"email\"<\/span>&gt;<\/span>Email:<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">label<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"email\"<\/span> <span class=\"hljs-attr\">id<\/span>=<span class=\"hljs-string\">\"email\"<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"email\"<\/span> \/&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"submit\"<\/span>&gt;<\/span>Submit<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">button<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">form<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And the following shows the <code>form.php<\/code> file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">isset<\/span>($_GET&#91;<span class=\"hljs-string\">'email'<\/span>])) {\n\tvar_dump($_GET&#91;<span class=\"hljs-string\">'email'<\/span>]);\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that both <code>$_POST<\/code> and <code>$_GET<\/code> arrays are superglobal variables. It means that you can access them anywhere in the script.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">HTTP GET or POST<\/h2>\n\n\n\n<p>In general, you should use the <code>GET<\/code> method when the form only retrieves data from the server. For example, a search form that allows users to search for information should use the <code>GET<\/code> method.<\/p>\n\n\n\n<p>When you have a form that causes a change in the server, you should use the <code>POST<\/code> method. For example, a form that allows users to subscribe to a newsletter should use the <code>POST<\/code> method.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">PHP form example<\/h2>\n\n\n\n<p>The following <code>index.php<\/code> contains a form that allows users to subscribe to a newsletter:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html<\/span> <span class=\"hljs-attr\">lang<\/span>=<span class=\"hljs-string\">\"en\"<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">charset<\/span>=<span class=\"hljs-string\">\"UTF-8\"<\/span> \/&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"viewport\"<\/span> <span class=\"hljs-attr\">content<\/span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"<\/span> \/&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link<\/span> <span class=\"hljs-attr\">rel<\/span>=<span class=\"hljs-string\">\"stylesheet\"<\/span> <span class=\"hljs-attr\">href<\/span>=<span class=\"hljs-string\">\"css\/style.css\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title<\/span>&gt;<\/span>PHP Form Demo<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">title<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form<\/span> <span class=\"hljs-attr\">action<\/span>=<span class=\"hljs-string\">\"subscribe.php\"<\/span> <span class=\"hljs-attr\">method<\/span>=<span class=\"hljs-string\">\"post\"<\/span>&gt;<\/span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label<\/span> <span class=\"hljs-attr\">for<\/span>=<span class=\"hljs-string\">\"name\"<\/span>&gt;<\/span>Name:<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">label<\/span>&gt;<\/span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"text\"<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"name\"<\/span> <span class=\"hljs-attr\">required<\/span>=<span class=\"hljs-string\">\"required\"<\/span> <span class=\"hljs-attr\">placeholder<\/span>=<span class=\"hljs-string\">\"Enter your name\"<\/span> \/&gt;<\/span>\n            <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label<\/span> <span class=\"hljs-attr\">for<\/span>=<span class=\"hljs-string\">\"name\"<\/span>&gt;<\/span>Email:<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">label<\/span>&gt;<\/span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"email\"<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"email\"<\/span> <span class=\"hljs-attr\">required<\/span>=<span class=\"hljs-string\">\"required\"<\/span> <span class=\"hljs-attr\">placeholder<\/span>=<span class=\"hljs-string\">\"Enter your email\"<\/span> \/&gt;<\/span>\n            <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"submit\"<\/span>&gt;<\/span>Subscribe<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">button<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">form<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">main<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">html<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The form uses the <code>POST<\/code> method and submits the data to the <code>subscribe.php<\/code> page. It has two input elements with type <code>text<\/code> and <code>email<\/code>.<\/p>\n\n\n\n<p>Before submitting the form to the server, the web browser checks if all required fields are filled out, in the correct format. This is known as client-side form validation. <\/p>\n\n\n\n<p>To validate data on the client-side, you can use either HTML5 form validation or JavaScript validation. However, you should <strong>never<\/strong> rely on client-side validation as a security measure.<\/p>\n\n\n\n<p>The client-side validation&#8217;s purpose is to help legitimate users to enter data in the correct format. However, it doesn&#8217;t prevent malicious users from entering bad data that potentially harm the application. Therefore, it&#8217;s mandatory to implement server-side validation.<\/p>\n\n\n\n<p>The following shows the code of the <code>subscribe.php<\/code> file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-comment\">\/\/---------------------------------------------<\/span>\n<span class=\"hljs-comment\">\/\/ WARNING: this doesn't include sanitization<\/span>\n<span class=\"hljs-comment\">\/\/ and validation<\/span>\n<span class=\"hljs-comment\">\/\/---------------------------------------------<\/span>\n<span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">isset<\/span>($_POST&#91;<span class=\"hljs-string\">'name'<\/span>], $_POST&#91;<span class=\"hljs-string\">'email'<\/span>])) {\n\t$name = $_POST&#91;<span class=\"hljs-string\">'name'<\/span>];\n\t$email = $_POST&#91;<span class=\"hljs-string\">'email'<\/span>];\n\n\t<span class=\"hljs-comment\">\/\/ show the $name and $email<\/span>\n\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">\"Thanks $name for your subscription.&lt;br&gt;\"<\/span>;\n\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">\"Please confirm it in your inbox of the email $email.\"<\/span>;\n} <span class=\"hljs-keyword\">else<\/span> {\n\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'You need to provide your name and email address.'<\/span>;\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>First, check if the name and email are in the <code>$_POST<\/code> array using the <code>isset()<\/code> function.<\/li><li>Second, show a thank you message.<\/li><\/ul>\n\n\n\n<p>If you enter the name as <code>John<\/code> and email as <code>john.doe@example.com<\/code>, you&#8217;ll see the following message on the <code>subscribe.php<\/code> page:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">Thanks John for your subscription. \nPlease confirm it in your inbox of the email john.doe@example.com<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Escaping the output<\/h2>\n\n\n\n<p>The <code>subscribe.php<\/code> page directly displays the form data. If malicious hackers intentionally enter bad data, the page won&#8217;t work properly.<\/p>\n\n\n\n<p>For example, if the following JavaScript code is entered in the <code>name<\/code> field and the form is submitted.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script<\/span>&gt;<\/span><span class=\"actionscript\">alert(<span class=\"hljs-string\">'Hello'<\/span>);<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">script<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>&#8230;you&#8217;ll see that the page displays an <a href=\"https:\/\/www.javascripttutorial.net\/javascript-bom\/javascript-alert\/\" target=\"_blank\" rel=\"noreferrer noopener\">alert<\/a>.<\/p>\n\n\n\n<p>Imagine that the script doesn&#8217;t just show an alert but loads the malicious code from another server to the user&#8217;s web browser, the risk is higher. This type of attack is called <a href=\"https:\/\/owasp.org\/www-community\/attacks\/xss\/\" target=\"_blank\" rel=\"noreferrer noopener\">cross-site scripting (XSS) attack<\/a>.<\/p>\n\n\n\n<p>Therefore, before displaying user input on a webpage, you should always escape the data. To do that, you use the <code>htmlspecialchars()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-comment\">\/\/---------------------------------------------<\/span>\n<span class=\"hljs-comment\">\/\/ WARNING: this doesn't include sanitization<\/span>\n<span class=\"hljs-comment\">\/\/ and validation<\/span>\n<span class=\"hljs-comment\">\/\/---------------------------------------------<\/span>\n<span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">isset<\/span>($_POST&#91;<span class=\"hljs-string\">'name'<\/span>], $_POST&#91;<span class=\"hljs-string\">'email'<\/span>])) {\n\t$name = htmlspecialchars($_POST&#91;<span class=\"hljs-string\">'name'<\/span>]);\n\t$email = htmlspecialchars($_POST&#91;<span class=\"hljs-string\">'email'<\/span>]);\n\n\t<span class=\"hljs-comment\">\/\/ show the $name and $email<\/span>\n\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">\"Thanks $name for your subscription.&lt;br&gt;\"<\/span>;\n\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">\"Please confirm it in your inbox of the email $email.\"<\/span>;\n} <span class=\"hljs-keyword\">else<\/span> {\n\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'You need to provide your name and email address.'<\/span>;\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that we will also show you how to <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-form-validation\/\">sanitize and validate form data in the next tutorial<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">PHP self-processing form<\/h2>\n\n\n\n<p>Sometimes, you want to include both form and logic for handling form submission in a single PHP file. This form is often referred to as a self-processing form.<\/p>\n\n\n\n<p>To create a self-processing form, you can use the <code>$_SERVER['REQUEST_METHOD']<\/code> that returns the request method e.g., <code>GET<\/code> or <code>POST<\/code>.<\/p>\n\n\n\n<p>If the <code>$_SERVER['REQUEST_METHOD']<\/code>&nbsp; is GET, you show the form. And if the <code>$_SERVER['REQUEST_METHOD']<\/code>&nbsp; is POST, you process it. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">&lt;!DOCTYPE html&gt;\n&lt;html lang=<span class=\"hljs-string\">\"en\"<\/span>&gt;\n&lt;head&gt;\n    &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"<\/span>&gt;\n    &lt;meta name=<span class=\"hljs-string\">\"viewport\"<\/span> content=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"<\/span>&gt;\n    &lt;link rel=<span class=\"hljs-string\">\"stylesheet\"<\/span> href=<span class=\"hljs-string\">\"css\/style.css\"<\/span>&gt;\n    &lt;title&gt;PHP Form&lt;\/title&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n    &lt;main&gt;\n        <span class=\"hljs-meta\">&lt;?php<\/span> <span class=\"hljs-keyword\">if<\/span> ($_SERVER&#91;<span class=\"hljs-string\">'REQUEST_METHOD'<\/span>] === <span class=\"hljs-string\">'GET'<\/span>) : <span class=\"hljs-meta\">?&gt;<\/span>\n            &lt;form action=<span class=\"hljs-string\">\"&lt;?php htmlspecialchars($_SERVER&#91;'PHP_SELF']) ?&gt;\"<\/span> method=<span class=\"hljs-string\">\"post\"<\/span>&gt;\n                &lt;div&gt;\n                    &lt;label <span class=\"hljs-keyword\">for<\/span>=<span class=\"hljs-string\">\"name\"<\/span>&gt;Name:&lt;\/label&gt;\n                    &lt;input type=<span class=\"hljs-string\">\"text\"<\/span> name=<span class=\"hljs-string\">\"name\"<\/span> required=<span class=\"hljs-string\">\"required\"<\/span> placeholder=<span class=\"hljs-string\">\"Enter your name\"<\/span> \/&gt;\n                &lt;\/div&gt;\n\n                &lt;div&gt;\n                    &lt;label <span class=\"hljs-keyword\">for<\/span>=<span class=\"hljs-string\">\"name\"<\/span>&gt;Email:&lt;\/label&gt;\n                    &lt;input type=<span class=\"hljs-string\">\"email\"<\/span> name=<span class=\"hljs-string\">\"email\"<\/span> required=<span class=\"hljs-string\">\"required\"<\/span> placeholder=<span class=\"hljs-string\">\"Enter your email\"<\/span> \/&gt;\n                &lt;\/div&gt;\n\n                &lt;button type=<span class=\"hljs-string\">\"submit\"<\/span>&gt;Subscribe&lt;\/button&gt;\n\n            &lt;\/form&gt;\n        <span class=\"hljs-meta\">&lt;?php<\/span> <span class=\"hljs-keyword\">else<\/span> : <span class=\"hljs-meta\">?&gt;<\/span>\n\n            <span class=\"hljs-meta\">&lt;?php<\/span>\n            <span class=\"hljs-comment\">\/\/---------------------------------------------<\/span>\n            <span class=\"hljs-comment\">\/\/ WARNING: this doesn't include sanitization<\/span>\n            <span class=\"hljs-comment\">\/\/ and validation<\/span>\n            <span class=\"hljs-comment\">\/\/---------------------------------------------<\/span>\n            <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">isset<\/span>($_POST&#91;<span class=\"hljs-string\">'name'<\/span>], $_POST&#91;<span class=\"hljs-string\">'email'<\/span>])) {\n                $name = htmlspecialchars($_POST&#91;<span class=\"hljs-string\">'name'<\/span>]);\n                $email = htmlspecialchars($_POST&#91;<span class=\"hljs-string\">'email'<\/span>]);\n\n                <span class=\"hljs-comment\">\/\/ show the $name and $email<\/span>\n                <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">\"Thanks $name for your subscription.&lt;br&gt;\"<\/span>;\n                <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">\"Please confirm it in your inbox of the email $email.\"<\/span>;\n            } <span class=\"hljs-keyword\">else<\/span> {\n                <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'You need to provide your name and email address.'<\/span>;\n            }\n\n            <span class=\"hljs-meta\">?&gt;<\/span>\n\n        <span class=\"hljs-meta\">&lt;?php<\/span> <span class=\"hljs-keyword\">endif<\/span> <span class=\"hljs-meta\">?&gt;<\/span>\n    &lt;\/main&gt;\n&lt;\/body&gt;\n\n&lt;\/html&gt;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, mixing PHP &amp; HTML is not always a good practice.<\/p>\n\n\n\n<p>To make the code more organized, you can create the following file &amp; directory structure:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">.\n\u251c\u2500\u2500 css\n\u2502   \u2514\u2500\u2500 style.css\n\u251c\u2500\u2500 inc\n\u2502   \u251c\u2500\u2500 header.php\n\u2502   \u251c\u2500\u2500 footer.php\n\u2502   \u251c\u2500\u2500 get.php\n\u2502   \u251c\u2500\u2500 post.php\n\u2502   \u2514\u2500\u2500 .htaccess      \n\u2514\u2500\u2500 index.php<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>index.php<\/code> file in the root directory will include the <code>header.php<\/code> and <code>footer.php<\/code>. <\/p>\n\n\n\n<p>If the request method is <code>GET<\/code>, the <code>index.php<\/code> file loads the form in the <code>get.php<\/code> file. Otherwise, it loads the code from the <code>post.php<\/code> file for processing the <code>POST<\/code> request.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">index.php<\/h3>\n\n\n\n<p>The following shows the <code>index.php<\/code> file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-keyword\">__DIR__<\/span> . <span class=\"hljs-string\">'\/inc\/header.php'<\/span>;\n\n$request_method = strtoupper($_SERVER&#91;<span class=\"hljs-string\">'REQUEST_METHOD'<\/span>]);\n\n<span class=\"hljs-keyword\">if<\/span> ($request_method === <span class=\"hljs-string\">'GET'<\/span>) {\n\t<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-keyword\">__DIR__<\/span> . <span class=\"hljs-string\">'\/inc\/get.php'<\/span>;\n} <span class=\"hljs-keyword\">elseif<\/span> ($request_method === <span class=\"hljs-string\">'POST'<\/span>) {\n\t<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-keyword\">__DIR__<\/span> .  <span class=\"hljs-string\">'\/inc\/post.php'<\/span>;\n}\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-keyword\">__DIR__<\/span> .  <span class=\"hljs-string\">'\/inc\/footer.php'<\/span>;\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">header.php<\/h3>\n\n\n\n<p>The <code>header.php<\/code> contain the first part of the page:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html<\/span> <span class=\"hljs-attr\">lang<\/span>=<span class=\"hljs-string\">\"en\"<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">charset<\/span>=<span class=\"hljs-string\">\"UTF-8\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"viewport\"<\/span> <span class=\"hljs-attr\">content<\/span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link<\/span> <span class=\"hljs-attr\">rel<\/span>=<span class=\"hljs-string\">\"stylesheet\"<\/span> <span class=\"hljs-attr\">href<\/span>=<span class=\"hljs-string\">\"css\/style.css\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title<\/span>&gt;<\/span>PHP Form<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">title<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">footer.php<\/h3>\n\n\n\n<p>The <code>footer.php<\/code> file contains the enclosing tags of the page:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">main<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">html<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">get.php<\/h3>\n\n\n\n<p>The <code>get.php<\/code> file contains the form. The <code>$_SERVER['PHP_SELF']<\/code> returns the file name of the currently executing script. <\/p>\n\n\n\n<p>For example, if the executing script is <code>https:\/\/www.CodeCamp\/app\/form\/index.php<\/code>, the <code>$_SERVER['PHP_SELF']<\/code> returns <code>\/app\/form\/index.php<\/code>.<\/p>\n\n\n\n<p>However, the <code>$_SERVER['PHP_SELF']<\/code> cannot be trusted since and it&#8217;s vulnerable to XSS attacks. Therefore, you should always escape it using the <code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-htmlspecialchars\/\">htmlspecialchars()<\/a><\/code> function.<\/p>\n\n\n\n<p>The following shows the <code>get.php<\/code> file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-20\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form<\/span> <span class=\"hljs-attr\">action<\/span>=<span class=\"hljs-string\">\"&lt;?php htmlspecialchars($_SERVER&#91;'PHP_SELF']) ?&gt;\"<\/span> <span class=\"hljs-attr\">method<\/span>=<span class=\"hljs-string\">\"post\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label<\/span> <span class=\"hljs-attr\">for<\/span>=<span class=\"hljs-string\">\"name\"<\/span>&gt;<\/span>Name:<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">label<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"text\"<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"name\"<\/span> <span class=\"hljs-attr\">placeholder<\/span>=<span class=\"hljs-string\">\"Enter your name\"<\/span> \/&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label<\/span> <span class=\"hljs-attr\">for<\/span>=<span class=\"hljs-string\">\"name\"<\/span>&gt;<\/span>Email:<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">label<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"email\"<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"email\"<\/span> <span class=\"hljs-attr\">placeholder<\/span>=<span class=\"hljs-string\">\"Enter your email\"<\/span> \/&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"submit\"<\/span>&gt;<\/span>Subscribe<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">button<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">form<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-20\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">post.php<\/h3>\n\n\n\n<p>The following shows the <code>post.php<\/code> file that handles the form submission:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-21\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-comment\">\/\/-----------------------------------------------------<\/span>\n<span class=\"hljs-comment\">\/\/ WARNING: this doesn't include sanitization<\/span>\n<span class=\"hljs-comment\">\/\/ and validation<\/span>\n<span class=\"hljs-comment\">\/\/-----------------------------------------------------<\/span>\n\n<span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">isset<\/span>($_POST&#91;<span class=\"hljs-string\">'name'<\/span>], $_POST&#91;<span class=\"hljs-string\">'email'<\/span>)) {\n\t$name = htmlspecialchars($_POST&#91;<span class=\"hljs-string\">'name'<\/span>]);\n\t$email = htmlspecialchars($_POST&#91;<span class=\"hljs-string\">'email'<\/span>]);\n\n\t<span class=\"hljs-comment\">\/\/ show the $name and $email<\/span>\n\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">\"Thanks $name for your subscription.&lt;br&gt;\"<\/span>;\n\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">\"Please confirm it in your inbox of the email $email.\"<\/span>;\n} <span class=\"hljs-keyword\">else<\/span> {\n\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'You need to provide your name and email address.'<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-21\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">.htaccess<\/h3>\n\n\n\n<p>The .htaccess file prevents direct access to the files in the <code>inc<\/code> directory. It&#8217;s relevant only to the Apache webserver.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-22\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Deny <span class=\"hljs-keyword\">from<\/span> all<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-22\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>By using the .htaccess file, you cannot browse the file directly from the inc folder. For example: <code>https:\/\/www.CodeCamp\/app\/form\/inc\/get.php<\/code><\/p>\n\n\n\n<p><a href=\"https:\/\/www.CodeCamp\/app\/form\/\" target=\"_blank\" rel=\"noreferrer noopener\">Here&#8217;s the final version of the form<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use the <code>&lt;form&gt;<\/code> tag to create an HTML form.<\/li><li>Specify the URL that processes the form submission in the <code>action<\/code> attribute.<\/li><li>Use either <code>GET<\/code> or <code>POST<\/code> method for the <code>method<\/code> attribute of the form for submission.<\/li><li>Use the <code>$_GET<\/code> or <code>$_POST<\/code> to access the form data.<\/li><li>Use the <code>htmlspecialchars()<\/code> function to escape the user input before showing it on a webpage.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"79\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-form\/\"\n\t\t\t\tdata-post-title=\"PHP Form\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"79\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-form\/\"\n\t\t\t\tdata-post-title=\"PHP Form\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how HTML forms work and how to process form data in PHP.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":83,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-79","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/79","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=79"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/79\/revisions"}],"predecessor-version":[{"id":2554,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/79\/revisions\/2554"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=79"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}