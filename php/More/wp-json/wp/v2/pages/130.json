{"id":130,"date":"2021-03-08T00:26:11","date_gmt":"2021-03-08T00:26:11","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=130"},"modified":"2021-06-27T14:06:33","modified_gmt":"2021-06-27T14:06:33","slug":"php-array-filter","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-array-filter\/","title":{"rendered":"PHP array_filter Function"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the PHP <code>array_filter()<\/code> function to filter elements of an array using a callback function.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to PHP array_filter() function<\/h2>\n\n\n\n<p>When you want to filter elements of an <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-array\/\">array<\/a>, you often <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-foreach\/\">iterate over the elements<\/a> and check whether the result array should include each element.<\/p>\n\n\n\n<p>The following example uses the <code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-foreach\/\">foreach<\/a><\/code> statement to iterate over the elements of the <code>$numbers<\/code> array and filter the odd numbers:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span>];\n$odd_numbers = &#91;];\n\n<span class=\"hljs-keyword\">foreach<\/span> ($numbers <span class=\"hljs-keyword\">as<\/span> $number) {\n\t<span class=\"hljs-keyword\">if<\/span> ($number % <span class=\"hljs-number\">2<\/span> === <span class=\"hljs-number\">1<\/span>) {\n\t\t$odd_numbers&#91;] = $number;\n\t}\n}\n\nprint_r($odd_numbers);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; <span class=\"hljs-number\">1<\/span>\n    &#91;<span class=\"hljs-number\">1<\/span>] =&gt; <span class=\"hljs-number\">3<\/span>\n    &#91;<span class=\"hljs-number\">2<\/span>] =&gt; <span class=\"hljs-number\">5<\/span>\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>array_filter()<\/code> function makes the code less verbose and more expressive:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span>];\n\n$odd_numbers = array_filter(\n\t$numbers,\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-params\">($number)<\/span> <\/span>{\n\t\t<span class=\"hljs-keyword\">return<\/span> $number % <span class=\"hljs-number\">2<\/span> === <span class=\"hljs-number\">1<\/span>;\n\t}\n);\n\nprint_r($odd_numbers);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>From PHP 7.4, you can can use the <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-arrow-functions\/\">arrow function<\/a> instead of the anonymous function like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span>];\n\n$odd_numbers = array_filter(\n\t$numbers,\n\tfn ($number) =&gt; $number % <span class=\"hljs-number\">2<\/span> === <span class=\"hljs-number\">1<\/span>\n);\n\nprint_r($odd_numbers);\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>array_filter()<\/code> function allows you to filter elements of an array using a callback function. <\/p>\n\n\n\n<p>The following ilustrates the syntax of the <code>array_filter()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">array_filter ( \n    <span class=\"hljs-keyword\">array<\/span> $array , \n    callable|<span class=\"hljs-keyword\">null<\/span> $callback = <span class=\"hljs-keyword\">null<\/span> , \n    int $mode = <span class=\"hljs-number\">0<\/span> \n) : <span class=\"hljs-keyword\">array<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>array_filter()<\/code> function iterates over the elements of the <code>$array<\/code> and passes each element to the <code>$callback<\/code> function. If the callback function returns <code>true<\/code>, the <code>array_filter()<\/code> function includes the element in the result array.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">PHP array_filter() function examples<\/h2>\n\n\n\n<p>Let&#8217;s take some examples to understand the <code>array_filter()<\/code> function better.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">1) Basic array_filter() function example<\/h3>\n\n\n\n<p>To filter out all the odd numbers in the <code>$numbers<\/code> array, you use the <code>array_filter()<\/code> function as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span>];\n\n$even_numbers = array_filter(\n\t$numbers,\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-params\">($number)<\/span> <\/span>{\n\t\t<span class=\"hljs-keyword\">return<\/span> $number % <span class=\"hljs-number\">2<\/span> === <span class=\"hljs-number\">0<\/span>;\n\t}\n);\n\nprint_r($even_numbers);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">2) Using callback as a method of a class<\/h3>\n\n\n\n<p>Besides a callback, you can pass a method of a class to the <code>array_filter()<\/code> function like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">array_filter($items,&#91;$instance,<span class=\"hljs-string\">'callback'<\/span>]);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Odd<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">isOdd<\/span><span class=\"hljs-params\">($num)<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">return<\/span> $num % <span class=\"hljs-number\">2<\/span> === <span class=\"hljs-number\">1<\/span>;\n    }\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Odd<\/code> class has a method <code>isOdd()<\/code> that returns <code>true<\/code> if the argument is an odd number; otherwise, it returns <code>false<\/code>.<\/p>\n\n\n\n<p>To use the <code>isOdd()<\/code> method as the callback of the <code>array_filter()<\/code> function, you use the following form:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Odd<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">isOdd<\/span><span class=\"hljs-params\">($num)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">return<\/span> $num % <span class=\"hljs-number\">2<\/span> === <span class=\"hljs-number\">1<\/span>;\n\t}\n}\n\n$numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span>];\n$odd_numbers = array_filter(\n\t$numbers,\n\t&#91;<span class=\"hljs-keyword\">new<\/span> Odd(), <span class=\"hljs-string\">'isOdd'<\/span>]\n);\n\nprint_r($odd_numbers);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you have a class that has is a <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-static-methods\/\">static method<\/a>, you pass the static method as the callback of the <code>array_filter()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">array_filter($array, &#91;<span class=\"hljs-string\">'Class'<\/span>,<span class=\"hljs-string\">'callback'<\/span>]);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Even<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">static<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">isEven<\/span><span class=\"hljs-params\">($num)<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">return<\/span> $num % <span class=\"hljs-number\">2<\/span> === <span class=\"hljs-number\">0<\/span>;\n    }\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Even<\/code> class has a static method <code>isEven()<\/code> that returns <code>true<\/code> if the argument is even; otherwise, it returns <code>false<\/code>.<\/p>\n\n\n\n<p>The following uses the <code>isEven()<\/code> static method as the callback of the <code>array_fitler()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$even_numbers = array_filter($numbers, &#91;<span class=\"hljs-string\">'Even'<\/span>,<span class=\"hljs-string\">'isEven'<\/span>]);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>From PHP 5.3, if a <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-objects\/\">class<\/a> implements the <code><a href=\"https:\/\/www.CodeCamp\/php-oop\/php-__invoke\/\">__invoke()<\/a><\/code> <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-magic-methods\/\">magic method<\/a>, you can use it as a callable. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Positive<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__invoke<\/span><span class=\"hljs-params\">($number)<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">return<\/span> $number  &gt; <span class=\"hljs-number\">0<\/span>;\n    }\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>Positive<\/code> class has the <code>__invoke()<\/code> magic method that returns <code>true<\/code> if the argument is positive; otherwise, it returns false.<\/p>\n\n\n\n<p>You can pass an instance of the <code>Positive<\/code> class to the <code>array_filter()<\/code> function for including only positive numbers in the result array.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Positive<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__invoke<\/span><span class=\"hljs-params\">($number)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">return<\/span> $number &gt; <span class=\"hljs-number\">0<\/span>;\n\t}\n}\n\n$numbers = &#91;<span class=\"hljs-number\">-1<\/span>, <span class=\"hljs-number\">-2<\/span>, <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>];\n$positives = array_filter($numbers, <span class=\"hljs-keyword\">new<\/span> Positive());\n\nprint_r($positives);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">3<\/span>] =&gt; <span class=\"hljs-number\">1<\/span>\n    &#91;<span class=\"hljs-number\">4<\/span>] =&gt; <span class=\"hljs-number\">2<\/span>\n    &#91;<span class=\"hljs-number\">5<\/span>] =&gt; <span class=\"hljs-number\">3<\/span>\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Passing elements to the callback function<\/h2>\n\n\n\n<p>By default, the <code>array_filter()<\/code> function passes the value of each array element to the callback function for filtering.<\/p>\n\n\n\n<p>Sometimes, you want to pass the key, not value, to the callback function. In this case, you can pass <code>ARRAY_FILTER_USE_KEY<\/code> as the third argument of the <code>array_filter()<\/code> function. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$inputs = &#91;\n\t<span class=\"hljs-string\">'first'<\/span> =&gt; <span class=\"hljs-string\">'John'<\/span>,\n\t<span class=\"hljs-string\">'last'<\/span> =&gt; <span class=\"hljs-string\">'Doe'<\/span>,\n\t<span class=\"hljs-string\">'password'<\/span> =&gt; <span class=\"hljs-string\">'secret'<\/span>,\n\t<span class=\"hljs-string\">'email'<\/span> =&gt; <span class=\"hljs-string\">'john.doe@example.com'<\/span>\n];\n\n$filtered = array_filter(\n\t$inputs,\n\tfn ($key) =&gt; $key !== <span class=\"hljs-string\">'password'<\/span>,\n\tARRAY_FILTER_USE_KEY\n);\n\nprint_r($filtered);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;first] =&gt; John\n    &#91;last] =&gt; Doe\n    &#91;email] =&gt; john.doe@example.com\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, <code>$filtered<\/code> contains all elements of the <code>$inputs<\/code> array except for the element whose key is <code>password<\/code>.<\/p>\n\n\n\n<p>To pass both the key and value of the element to the callback function, you pass the&nbsp;<code>ARRAY_FILTER_USE_BOTH<\/code> value as the third argument of the <code>array_filter()<\/code> function. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$inputs = &#91;\n\t<span class=\"hljs-string\">'first'<\/span> =&gt; <span class=\"hljs-string\">'John'<\/span>,\n\t<span class=\"hljs-string\">'last'<\/span> =&gt; <span class=\"hljs-string\">'Doe'<\/span>,\n\t<span class=\"hljs-string\">'password'<\/span> =&gt; <span class=\"hljs-string\">'secret'<\/span>,\n\t<span class=\"hljs-string\">'email'<\/span> =&gt; <span class=\"hljs-string\">''<\/span>\n];\n\n$filtered = array_filter(\n\t$inputs,\n\tfn ($value, $key) =&gt; $value !== <span class=\"hljs-string\">''<\/span> &amp;&amp; $key !== <span class=\"hljs-string\">'password'<\/span>,\n\tARRAY_FILTER_USE_BOTH\n);\n\nprint_r($filtered);\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;first] =&gt; John\n    &#91;last] =&gt; Doe\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this tutorial, you have learned how to use the PHP <code>array_filter()<\/code> function to filter elements of an array using a callback.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"130\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-array-filter\/\"\n\t\t\t\tdata-post-title=\"PHP array_filter Function\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"130\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-array-filter\/\"\n\t\t\t\tdata-post-title=\"PHP array_filter Function\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll how to use the PHP array_filter() function to filter elements of an array using a callback.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":72,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-130","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/130","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=130"}],"version-history":[{"count":4,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/130\/revisions"}],"predecessor-version":[{"id":2062,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/130\/revisions\/2062"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=130"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}