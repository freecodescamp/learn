{"id":463,"date":"2021-03-17T01:19:17","date_gmt":"2021-03-17T01:19:17","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=463"},"modified":"2021-11-03T14:55:28","modified_gmt":"2021-11-03T14:55:28","slug":"php-function-parameters","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-function-parameters\/","title":{"rendered":"PHP Function Parameters"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the function parameters and pass arguments by value and reference.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP function parameters<\/h2>\n\n\n\n<p>A <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-functions\/\">function<\/a> can have zero or more parameters:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">function_name<\/span><span class=\"hljs-params\">(parameter_list)<\/span> \n<\/span>{\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When a function has multiple parameters, you need to separate them using a comma (<code>,<\/code>). <\/p>\n\n\n\n<p>The following example defines the <code>concat()<\/code> function that concatenates two strings into one:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">concat<\/span><span class=\"hljs-params\">($str1, $str2)<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">return<\/span> $str1 . $str2;\n}\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>concat()<\/code> function has two parameters <code>$str1<\/code> and <code>$str2<\/code>.<\/p>\n\n\n\n<p>When you call the <code>concat()<\/code> function, you need to pass two arguments that correspond to the parameters. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">concat<\/span><span class=\"hljs-params\">($str1, $str2)<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">return<\/span> $str1 . $str2;\n}\n\n$greeting = concat(<span class=\"hljs-string\">'Welcome '<\/span>, <span class=\"hljs-string\">'Admin'<\/span>);\n<span class=\"hljs-keyword\">echo<\/span> $greeting;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>$str1<\/code> will take the first argument <code>'Welcome '<\/code>, and the <code>$str2<\/code> will take the second argument <code>'Admin'<\/code>.<\/p>\n\n\n\n<p>PHP will raise an error if the number of arguments you pass to the function is less than the number of parameters. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">concat<\/span><span class=\"hljs-params\">($str1, $str2)<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">return<\/span> $str1 . $str2;\n}\n\n\n$greeting = concat(<span class=\"hljs-string\">'Welcome'<\/span>);\n<span class=\"hljs-keyword\">echo<\/span> $greeting;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you pass multiple arguments to a function, you can break the list the arguments vertically to make the code more readable like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">concat<\/span><span class=\"hljs-params\">($str1, $str2)<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">return<\/span> $str1 . $str2;\n}\n\n$greeting = concat(\n\t<span class=\"hljs-string\">'Welcome '<\/span>,\n\t<span class=\"hljs-string\">'Home'<\/span>\n);\n\n<span class=\"hljs-keyword\">echo<\/span> $greeting;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It&#8217;s a good practice to list arguments vertically when the argument list is long.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Trailing comma (,)<\/h2>\n\n\n\n<p>From PHP 7.0,  the argument list may contain a trailing comma (<code>,<\/code>) which the PHP interpreter will ignore. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$greeting = concat(\n\t<span class=\"hljs-string\">'Welcome '<\/span>,\n\t<span class=\"hljs-string\">'Home'<\/span>,\n);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Starting from PHP 8.0, you can place the trailing comma (,) in the parameter list like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">concat<\/span><span class=\"hljs-params\">(\n\t$str1,\n\t$str2,\n)<\/span> <\/span>{\n\t<span class=\"hljs-keyword\">return<\/span> $str1 . $str2;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Passing arguments by values<\/h2>\n\n\n\n<p>Consider the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$counter = <span class=\"hljs-number\">1<\/span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">increase<\/span><span class=\"hljs-params\">($value)<\/span>\n<\/span>{\n\t$value+= <span class=\"hljs-number\">1<\/span>;\n\t<span class=\"hljs-keyword\">echo<\/span> $value. &lt;br&gt;; <span class=\"hljs-comment\">\/\/ 2<\/span>\n}\n\n<span class=\"hljs-comment\">\/\/ increase the counter<\/span>\nincrease($counter);\n\n<span class=\"hljs-keyword\">echo<\/span> $counter . &lt;br&gt;; <span class=\"hljs-comment\">\/\/ 1<\/span><\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">2\n1<\/code><\/span><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>First, define the <code>$counter<\/code> variable and initialize its value to one.<\/li><li>Second, define the <code>increase()<\/code> function that increases the argument by one and displays it.<\/li><li>Third, call the <code>increase()<\/code> function and pass the <code>$counter<\/code> variable into the function.<\/li><li>Finally, display the <code>$counter<\/code> variable.<\/li><\/ul>\n\n\n\n<p>When you pass the <code>$counter<\/code> variable to the <code>increase()<\/code> function, the function increases its value by one. Therefore, when you display the value of the <code>$counter<\/code> inside the function, you&#8217;ll get two.<\/p>\n\n\n\n<p>However, after the function call, the value of the counter is still one. It means that the <code>increase()<\/code> function doesn&#8217;t increase the <code>$counter<\/code> variable outside the function.<\/p>\n\n\n\n<p>What happens is that when you pass the <code>$counter<\/code> to the <code>increase()<\/code> function, the function copies the <code>$counter<\/code> variable and modifies the copy. It doesn&#8217;t change the original variable. The <code>$counter<\/code> variable doesn&#8217;t change.<\/p>\n\n\n\n<p>When the value of an argument within the function is changed and doesn&#8217;t get changed outside the function, it is passed by value.<\/p>\n\n\n\n<p>By default, arguments are passed by values in PHP. If you want a function to change its arguments, you need to pass the arguments by reference.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Passing arguments by reference<\/h2>\n\n\n\n<p>To pass an argument by reference, you prepend the operator (<code>&amp;<\/code>) to the parameter name in the function definition like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$counter = <span class=\"hljs-number\">1<\/span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">increase<\/span><span class=\"hljs-params\">( &amp;$value )<\/span>\n<\/span>{\n\t$value += <span class=\"hljs-number\">1<\/span>;\n\t<span class=\"hljs-keyword\">echo<\/span> $value . &lt;br&gt;; <span class=\"hljs-comment\">\/\/ 2<\/span>\n}\n\n<span class=\"hljs-comment\">\/\/ increase the counter<\/span>\nincrease($counter);\n\n<span class=\"hljs-keyword\">echo<\/span> $counter . &lt;br&gt;; <span class=\"hljs-comment\">\/\/ 2<\/span><\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">2\n2<\/code><\/span><\/pre>\n\n\n<p>In this example, the change of the <code>$counter<\/code> variable reflects both inside and outside the function.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Separate parameters by a comma (<code>,<\/code>). Since PHP 8.0, the parameter list can have the trailing comma (<code>,<\/code>) which the PHP interpreter ignores.<\/li><li>By default, arguments are passed by value in PHP.<\/li><li>Prepend parameters by an ampersand (<code>&amp;<\/code>) to pass arguments by reference.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"463\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-function-parameters\/\"\n\t\t\t\tdata-post-title=\"PHP Function Parameters\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"463\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-function-parameters\/\"\n\t\t\t\tdata-post-title=\"PHP Function Parameters\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the function parameters and how to pass arguments by value and reference.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":35,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-463","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/463","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=463"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/463\/revisions"}],"predecessor-version":[{"id":2855,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/463\/revisions\/2855"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=463"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}