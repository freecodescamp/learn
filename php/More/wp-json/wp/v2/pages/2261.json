{"id":2261,"date":"2021-07-11T02:02:52","date_gmt":"2021-07-11T02:02:52","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=2261"},"modified":"2021-11-03T15:16:13","modified_gmt":"2021-11-03T15:16:13","slug":"php-variadic-functions","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-variadic-functions\/","title":{"rendered":"PHP Variadic Functions"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the PHP variadic functions that accept a variable number of arguments.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP variadic functions<\/h2>\n\n\n\n<p>So far, you&#8217;ve learned <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-functions\/\">how to define functions<\/a> that accept a fixed number of <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-function-parameters\/\">parameters<\/a>. A variadic function accepts a variable number of parameters.<\/p>\n\n\n\n<p>The following example defines a function called <code>sum()<\/code> that returns the sum of two integers:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">sum<\/span><span class=\"hljs-params\">(int $x, int $y)<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $x + $y;\n}\n\n<span class=\"hljs-keyword\">echo<\/span> sum(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>); <span class=\"hljs-comment\">\/\/ 30<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To allow the <code>sum()<\/code> function to accept a variable of arguments, you need to use <code>func_get_args()<\/code> function. The <code>func_num_args()<\/code> function returns an <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-array\/\">array<\/a> that contains all function arguments. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">sum<\/span><span class=\"hljs-params\">()<\/span>\n<\/span>{\n    $numbers = func_get_args();\n    $total = <span class=\"hljs-number\">0<\/span>;\n    <span class=\"hljs-keyword\">for<\/span> ($i = <span class=\"hljs-number\">0<\/span>; $i &lt; count($numbers); $i++) {\n        $total += $numbers&#91;$i];\n    }\n\n    <span class=\"hljs-keyword\">return<\/span> $total;\n}\n<span class=\"hljs-keyword\">echo<\/span> sum(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>) . <span class=\"hljs-string\">'&lt;br&gt;'<\/span>; <span class=\"hljs-comment\">\/\/ 30<\/span>\n<span class=\"hljs-keyword\">echo<\/span> sum(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>, <span class=\"hljs-number\">30<\/span>) . <span class=\"hljs-string\">'&lt;br&gt;'<\/span>; <span class=\"hljs-comment\">\/\/ 60<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we don&#8217;t specify any parameter for the <code>sum()<\/code> function. When calling the <code>sum()<\/code> function, we can pass any number of arguments into it.<\/p>\n\n\n\n<p>Inside the function, the <code>func_get_args()<\/code> returns an array that contains all the arguments. To sum up all the arguments, we use a <code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-for-loop\/\">for<\/a><\/code> loop.<\/p>\n\n\n\n<p>PHP 5.6 introduced the <code>...<\/code> operator. When you place the <code>...<\/code> operator in front of a function parameter, the function will accept a variable number of arguments, and the parameter will become an array inside the function. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">sum<\/span><span class=\"hljs-params\">(...$numbers)<\/span>\n<\/span>{\n    $total = <span class=\"hljs-number\">0<\/span>;\n    <span class=\"hljs-keyword\">for<\/span> ($i = <span class=\"hljs-number\">0<\/span>; $i &lt; count($numbers); $i++) {\n        $total += $numbers&#91;$i];\n    }\n\n    <span class=\"hljs-keyword\">return<\/span> $total;\n}\n<span class=\"hljs-keyword\">echo<\/span> sum(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>) . <span class=\"hljs-string\">'&lt;br&gt;'<\/span>; <span class=\"hljs-comment\">\/\/ 30<\/span>\n<span class=\"hljs-keyword\">echo<\/span> sum(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>, <span class=\"hljs-number\">30<\/span>) . <span class=\"hljs-string\">'&lt;br&gt;'<\/span>; <span class=\"hljs-comment\">\/\/ 60<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we place the <code>...<\/code> operator in front of the <code>$numbers<\/code> argument. The <code>sum()<\/code> function now accepts a variable of number arguments.<\/p>\n\n\n\n<p>PHP 7 allows you to declare types for variadic arguments. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">sum<\/span><span class=\"hljs-params\">(int ...$numbers)<\/span>: <span class=\"hljs-title\">int<\/span>\n<\/span>{\n    $total = <span class=\"hljs-number\">0<\/span>;\n    <span class=\"hljs-keyword\">for<\/span> ($i = <span class=\"hljs-number\">0<\/span>; $i &lt; count($numbers); $i++) {\n        $total += $numbers&#91;$i];\n    }\n\n    <span class=\"hljs-keyword\">return<\/span> $total;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>sum()<\/code> function will accept only integers and return the sum of integers.<\/p>\n\n\n\n<p>If a function has multiple parameters, only the last parameter can be variadic. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">my_func<\/span><span class=\"hljs-params\">($a, $b, ...$params)<\/span> <\/span>{\n    <span class=\"hljs-comment\">\/\/ ...<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you place the variadic parameter before a regular one, you&#8217;ll get an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">Fatal error: Only the last parameter can be variadic in...<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And a function only has one variadic parameter.<\/p>\n\n\n\n<p>Note that you can use the <code>array_sum()<\/code> to calculate the sum of all elements of an array. So you can simplify the <code>sum()<\/code> function like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">sum<\/span><span class=\"hljs-params\">(int ...$numbers)<\/span>: <span class=\"hljs-title\">int<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> array_sum($numbers);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>A variadic function accepts a variable number of arguments.<\/li><li>Do use the <code>...<\/code> operator to define a variadic function.<\/li><li>Only the last parameter can be variadic.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2261\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-variadic-functions\/\"\n\t\t\t\tdata-post-title=\"PHP Variadic Functions\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2261\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-variadic-functions\/\"\n\t\t\t\tdata-post-title=\"PHP Variadic Functions\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the PHP variadic functions that accept a variable number of arguments.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":41,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-2261","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2261","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=2261"}],"version-history":[{"count":2,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2261\/revisions"}],"predecessor-version":[{"id":2263,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2261\/revisions\/2263"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=2261"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}