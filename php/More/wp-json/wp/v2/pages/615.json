{"id":615,"date":"2021-03-23T06:12:28","date_gmt":"2021-03-23T06:12:28","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=615"},"modified":"2023-07-03T13:20:19","modified_gmt":"2023-07-03T13:20:19","slug":"php-this","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-oop\/php-this\/","title":{"rendered":"PHP $this"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about PHP <code>$this<\/code> keyword and how to use <code>$this<\/code> inside a class to reference the current object.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">What is $this in PHP?<\/h2>\n\n\n\n<p>In PHP, <code>$this<\/code> keyword references the current <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-objects\/\">object<\/a> of the class. The <code>$this<\/code> keyword allows you to access the properties and methods of the current object within the class using the object operator (<code>-&gt;<\/code>):<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">$this<\/span>-&gt;property\n<span class=\"hljs-keyword\">$this<\/span>-&gt;method()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>$this<\/code> keyword is only available within a class. It doesn&#8217;t exist outside of the class. If you attempt to use the <code>$this<\/code> outside of a class, you&#8217;ll get an error.<\/p>\n\n\n\n<p>When you access an object property using the <code>$this<\/code> keyword, you use the <code>$<\/code> with the <code>this<\/code> keyword only. And you don&#8217;t use the <code>$<\/code> with the property name. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">$this<\/span>-&gt;balance<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following shows the <code>BankAccount<\/code> class:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">BankAccount<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> $accountNumber;\n\n\t<span class=\"hljs-keyword\">public<\/span> $balance;\n\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">deposit<\/span><span class=\"hljs-params\">($amount)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">if<\/span> ($amount &gt; <span class=\"hljs-number\">0<\/span>) {\n\t\t\t<span class=\"hljs-keyword\">$this<\/span>-&gt;balance += $amount;\n\t\t}\n\t}\n\n\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">withdraw<\/span><span class=\"hljs-params\">($amount)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">if<\/span> ($amount &lt;= <span class=\"hljs-keyword\">$this<\/span>-&gt;balance) {\n\t\t\t<span class=\"hljs-keyword\">$this<\/span>-&gt;balance -= $amount;\n\t\t\t<span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">true<\/span>;\n\t\t}\n                <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">false<\/span>;\n\n\t}\n\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we access the <code>balance<\/code> property via the <code>$this<\/code> keyword inside the <code>deposit()<\/code> and <code>withdraw()<\/code> methods.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Chaining methods<\/h2>\n\n\n\n<p>First, create a new <code>BankAccount<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-comment\">\/\/ create a new account object<\/span>\n$account = <span class=\"hljs-keyword\">new<\/span> BankAccount();\n\n$account-&gt;accountNumber = <span class=\"hljs-number\">1<\/span>;\n$account-&gt;balance = <span class=\"hljs-number\">100<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, call the <code>deposit()<\/code> method three times to deposit different amounts of money:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$account-&gt;deposit(<span class=\"hljs-number\">100<\/span>);\n$account-&gt;deposit(<span class=\"hljs-number\">200<\/span>);\n$account-&gt;deposit(<span class=\"hljs-number\">300<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This code is quite verbose. It would be more concise and expressive if you can write these statements using a single statement like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$account-&gt;deposit(<span class=\"hljs-number\">100<\/span>)\n\t-&gt;deposit(<span class=\"hljs-number\">200<\/span>)\n\t-&gt;deposit(<span class=\"hljs-number\">300<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This technique is called <strong>method chaining<\/strong>. <\/p>\n\n\n\n<p>To form the chain, the <code>deposit()<\/code> method needs to return a <code>BankAccount<\/code> object, which is the <code>$this<\/code> inside the <code>BankAccount<\/code> class like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">BankAccount<\/span>\r\n<\/span>{\r\n\t<span class=\"hljs-keyword\">public<\/span> $accountNumber;\r\n\t<span class=\"hljs-keyword\">public<\/span> $balance;\r\n\r\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">deposit<\/span><span class=\"hljs-params\">($amount)<\/span>\r\n\t<\/span>{\r\n\t\t<span class=\"hljs-keyword\">if<\/span> ($amount &gt; <span class=\"hljs-number\">0<\/span>) {\r\n\t\t\t<span class=\"hljs-keyword\">$this<\/span>-&gt;balance += $amount;\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">$this<\/span>;\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">withdraw<\/span><span class=\"hljs-params\">($amount)<\/span>\r\n\t<\/span>{\r\n\t\t<span class=\"hljs-keyword\">if<\/span> ($amount &lt;= <span class=\"hljs-keyword\">$this<\/span>-&gt;balance) {\r\n\t\t\t<span class=\"hljs-keyword\">$this<\/span>-&gt;balance -= $amount;\r\n\t\t\t<span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">true<\/span>;\r\n\t\t}\r\n                <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">false<\/span>;\r\n\r\n\t}\r\n\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>deposit()<\/code> returns the <code>$this<\/code> which is the current object of the <code>BankAccount<\/code> class. Therefore, you can call any public method of the <code>BankAccount<\/code> class.<\/p>\n\n\n\n<p>The following example calls the <code>deposit()<\/code> method first and then the <code>withdraw()<\/code> method in a single statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$account-&gt;deposit(<span class=\"hljs-number\">100<\/span>)\n\t-&gt;withdraw(<span class=\"hljs-number\">150<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It&#8217;s equivalent to the following:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$account-&gt;deposit(<span class=\"hljs-number\">100<\/span>);\n$account-&gt;withdraw(<span class=\"hljs-number\">150<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\">\n<li>PHP <code>$this<\/code> keyword references the current object of the class. It&#8217;s only available within the class.<\/li>\n\n\n\n<li>Do use the method chaining by returning <code>$this<\/code> from a method to make the code more concise.<\/li>\n<\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"615\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-this\/\"\n\t\t\t\tdata-post-title=\"PHP $this\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"615\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-this\/\"\n\t\t\t\tdata-post-title=\"PHP $this\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about PHP $this and how to use it inside a class to reference the current object.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1753,"menu_order":1,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-615","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/615","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=615"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/615\/revisions"}],"predecessor-version":[{"id":2911,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/615\/revisions\/2911"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1753"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=615"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}