{"id":2648,"date":"2021-09-12T08:12:59","date_gmt":"2021-09-12T08:12:59","guid":{"rendered":"https:\/\/www.CodeCamp\/php-tutorial\/regex-greedy\/"},"modified":"2021-09-12T08:35:04","modified_gmt":"2021-09-12T08:35:04","slug":"regex-greedy","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/regex-greedy\/","title":{"rendered":"Regex Greedy"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the regex greedy mode and how it affects the way the quantifiers search for matches.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The problem with the regex greedy mode<\/h2>\n\n\n\n<p>Suppose you have the following string:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">&lt;a href=<span class=\"hljs-string\">\"\/\"<\/span> title=<span class=\"hljs-string\">\"Go to homepage\"<\/span>&gt;Home&lt;\/a&gt;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And you want to match the text within the quotes (<code>\"\"<\/code>). To do that, you can use the following pattern that includes the dot (<code>.<\/code>) <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-character-classes\/\">character class<\/a> and the (<code>+<\/code>) <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-quantifiers\/\">quantifier<\/a>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-string\">\".+\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The meaning of the pattern is as follows:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li><code>\"<\/code> starts with a quote<\/li><li><code>.<\/code> matches any character except the newline<\/li><li><code>+<\/code> matches the character one or more times<\/li><li><code>\"<\/code> endswith the quote<\/li><\/ul>\n\n\n\n<p>The following uses the <code>preg_match_all()<\/code> function to find a match in the string with the pattern:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$str = <span class=\"hljs-string\">'&lt;a href=\"\/\" title=\"Go to the homepage\"&gt;Home&lt;\/a&gt;'<\/span>;\n$pattern = <span class=\"hljs-string\">'\/\".+\"\/'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $str, $matches)) {\n    print_r($matches);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It returns the following:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; <span class=\"hljs-string\">\"\/\"<\/span> title=<span class=\"hljs-string\">\"Go to the homepage\"<\/span>\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This result is not what you expected.<\/p>\n\n\n\n<p>The reason is that the quantifier (<code>+<\/code>) uses the greedy mode by default. In the greedy mode, the quantifier (<code>+<\/code>) tries to match its preceding element (a character) as many times as possible.<\/p>\n\n\n\n<p>Let&#8217;s understand how the regex greedy mode works.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Understand how the regex greedy mode works<\/h2>\n\n\n\n<p>To match the <code>$str<\/code> with the <code>$pattern<\/code>, the regex engine will match every position in the <code>$str<\/code> with the <code>$pattern<\/code> starting from the first position in the string.<\/p>\n\n\n\n<p>So the regex engine starts from the first character in the <code>$str<\/code>. Since it is <code>&lt;<\/code> which does not match the quote (<code>\"<\/code>) in the pattern, the regex engine continues to search until it reaches the first quote (<code>\"<\/code>) in the string:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" src=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/09\/regex-greedy.svg\" alt=\"regex greedy - start matching\" class=\"wp-image-2654\"\/><\/figure>\n\n\n\n<p>The regex engine looks at the pattern and matches the string with the next rule <code>.+<\/code>. Because the <code>.+<\/code> rule matches a character one or more times, the regex engine matches all characters until it reaches the end of the string:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" src=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/09\/regex-greedy-mode.svg\" alt=\"regex greedy\" class=\"wp-image-2651\"\/><\/figure>\n\n\n\n<p>The regex engine examines the last rule in the pattern, which is a quote (&#8220;).<\/p>\n\n\n\n<p>However, it already reaches the end of the string. There&#8217;s no more character to match. It was too greedy to go too far.<\/p>\n\n\n\n<p>Therefore, the regex engine goes back from the end of the string to find the quote (&#8220;). This is called backtracking:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" src=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/09\/regex-greedy-backtrack.svg\" alt=\"regex greedy backtracking\" class=\"wp-image-2653\"\/><\/figure>\n\n\n\n<p>As a result, the match is the following substring which is not what you expected:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" src=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/09\/regex-greedy-result.svg\" alt=\"regex greedy\" class=\"wp-image-2658\"\/><\/figure>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-string\">\"\/\"<\/span> title=<span class=\"hljs-string\">\"Go to homepage\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>By default, other quantifiers also use the greedy mode. To fix this issue, you need to turn the greedy mode into a non-greedy (or lazy) mode by adding a question mark (<code>?<\/code>) to the quantifier like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-string\">\".+?\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following code returns the expected result:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$str = <span class=\"hljs-string\">'&lt;a href=\"\/\" title=\"Go to the homepage\"&gt;Home&lt;\/a&gt;'<\/span>;\n$pattern = <span class=\"hljs-string\">'\/\".+?\"\/'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $str, $matches)) {\n    print_r($matches&#91;<span class=\"hljs-number\">0<\/span>]);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; <span class=\"hljs-string\">\"\/\"<\/span>\n    &#91;<span class=\"hljs-number\">1<\/span>] =&gt; <span class=\"hljs-string\">\"Go to the homepage\"<\/span>\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To understand how the <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-non-greedy-lazy\/\" target=\"_blank\" rel=\"noreferrer noopener\">regex non-greedy<\/a> mode work, check out the <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-non-greedy-lazy\/\" target=\"_blank\" rel=\"noreferrer noopener\">regex non-greedy tutorial<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>By default, quantifiers use the greedy mode.<\/li><li>A greedy quantifier tries to match its preceding element as many times as possible.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2648\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-greedy\/\"\n\t\t\t\tdata-post-title=\"Regex Greedy\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2648\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-greedy\/\"\n\t\t\t\tdata-post-title=\"Regex Greedy\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the regex greedy mode and how it affects the way the quantifiers search for matches.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":132,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-2648","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2648","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=2648"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2648\/revisions"}],"predecessor-version":[{"id":2661,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2648\/revisions\/2661"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=2648"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}