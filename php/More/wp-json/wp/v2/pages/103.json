{"id":103,"date":"2021-03-08T00:19:39","date_gmt":"2021-03-08T00:19:39","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=103"},"modified":"2021-07-12T09:18:58","modified_gmt":"2021-07-12T09:18:58","slug":"php-abstract-class","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-oop\/php-abstract-class\/","title":{"rendered":"PHP Abstract Class"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the PHP abstract class to define an interface for other classes to extend.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP abstract class<\/h2>\n\n\n\n<p>An abstract class is a <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-objects\/\">class<\/a> that cannot be instantiated. Typically, an abstract defines an interface for other classes to extend. <\/p>\n\n\n\n<p>To define an abstract class, you add the <code>abstract<\/code> keyword as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">abstract<\/span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">className<\/span>\n<\/span>{\n   <span class=\"hljs-comment\">\/\/ ...<\/span>\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>An abstract class can have properties and methods as a regular class. But it cannot be instantiated.<\/p>\n\n\n\n<p>Similar to an abstract class, an abstract method is a method that does not have an implementation. To define an abstract method, you also use the <code>abstract<\/code> keyword before the method signature like this<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">abstract<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">methodName<\/span><span class=\"hljs-params\">(arguments)<\/span><\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In most cases, an abstract class will contain at least one abstract method though it is not required. If a class contains one or more abstract methods, it must be an abstract class.<\/p>\n\n\n\n<p>If a class <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-inheritance\/\">extends<\/a> an abstract class, it must implement all abstract methods or itself be declared abstract. <\/p>\n\n\n\n<h2 class=\"wp-block-heading\">PHP abstract class example<\/h2>\n\n\n\n<p>The following example defines an abstract class called <code>Dumper<\/code> that has an abstract method <code>dump()<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">abstract<\/span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Dumper<\/span> \n<\/span>{\n\t<span class=\"hljs-keyword\">abstract<\/span> <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">dump<\/span><span class=\"hljs-params\">($data)<\/span><\/span>;\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To dump information on the web, you can extend the <code>Dumper<\/code> class. <\/p>\n\n\n\n<p>The following defines the <code>WebDumper<\/code> class that extends the <code>Dumper<\/code> class. Since the <code>Dumper<\/code> class has the dump() abstract method, the <code>WebDumper<\/code> class needs to implement the <code>dump()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">abstract<\/span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Dumper<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">abstract<\/span> <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">dump<\/span><span class=\"hljs-params\">($data)<\/span><\/span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">WebDumper<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Dumper<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">dump<\/span><span class=\"hljs-params\">($data)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'&lt;pre&gt;'<\/span>;\n\t\tvar_dump($data);\n\t\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'&lt;\/pre&gt;'<\/span>;\n\t}\n}\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following creates a new instance of the <code>WebDumper<\/code> class and call the <code>dump()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$webDumper = <span class=\"hljs-keyword\">new<\/span> WebDumper();\n$webDumper-&gt;dump(<span class=\"hljs-string\">'PHP abstract class is awesome!'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you open the web browser, you&#8217;ll see the message is wrapper inside a &lt;pre&gt; tag:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">string(<span class=\"hljs-number\">30<\/span>) <span class=\"hljs-string\">\"PHP abstract class is awesome!\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Later, if you want to dump the information to the command line, you can define a class e.g., <code>ConsoleDumper<\/code> that extends the <code>Dumper<\/code> class:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">ConsoleDumper<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Dumper<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">dump<\/span><span class=\"hljs-params\">($data)<\/span>\n\t<\/span>{\n\t\tvar_dump($data);\n\t}\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>dump()<\/code> method of the <code>ConsoleDumper<\/code> calls the <code>var_dump()<\/code> function to dump the information to the command line.<\/p>\n\n\n\n<p>This UML diagram illustrates the relationship between the Dumper, WebDumper, and ConsoleDumper classes:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"371\" height=\"186\" src=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/03\/PHP-Abstract-Class.png\" alt=\"\" class=\"wp-image-573\" srcset=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/03\/PHP-Abstract-Class.png 371w, https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/03\/PHP-Abstract-Class-300x150.png 300w\" sizes=\"auto, (max-width: 371px) 100vw, 371px\" \/><\/figure><\/div>\n\n\n\n<p>The following defines a <code>DumperFactory<\/code> class that has a <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-static-methods\/\">static method<\/a> <code>getDumper()<\/code>.  <\/p>\n\n\n\n<p>The <code>getDumper()<\/code> method returns a new <code>WebDumper<\/code> object if the script is executed on the webserver and <code>ConsoleDumper<\/code> object if the script is executed on the command line:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">DumperFactory<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">static<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getDumper<\/span><span class=\"hljs-params\">()<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">return<\/span> PHP_SAPI === <span class=\"hljs-string\">'cli'<\/span>\n\t\t\t? <span class=\"hljs-keyword\">new<\/span> ConsoleDumper()\n\t\t\t: <span class=\"hljs-keyword\">new<\/span> WebDumper();\n\t}\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following uses the <code>DumperFactory<\/code> to get a Dumper based on where the script runs and show a message:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$dumper = DumperFactory::getDumper();\n$dumper-&gt;dump(<span class=\"hljs-string\">'PHP abstract class is awesome!'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you execute the script on the web browser, you&#8217;ll see the following message wrapped nicely in a &lt;pre> tag:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">string(<span class=\"hljs-number\">30<\/span>) <span class=\"hljs-string\">\"PHP abstract class is awesome!\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, if you run the script using PHP CLI, you&#8217;ll only see the message without the <code>&lt;pre&gt;<\/code> tag.<\/p>\n\n\n\n<p>Put it all together:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">abstract<\/span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Dumper<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">abstract<\/span> <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">dump<\/span><span class=\"hljs-params\">($data)<\/span><\/span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">WebDumper<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Dumper<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">dump<\/span><span class=\"hljs-params\">($data)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'&lt;pre&gt;'<\/span>;\n\t\tvar_dump($data);\n\t\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'&lt;\/pre&gt;'<\/span>;\n\t}\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">ConsoleDumper<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Dumper<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">dump<\/span><span class=\"hljs-params\">($data)<\/span>\n\t<\/span>{\n\t\tvar_dump($data);\n\t}\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">DumperFactory<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">static<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getDumper<\/span><span class=\"hljs-params\">()<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">return<\/span> PHP_SAPI === <span class=\"hljs-string\">'cli'<\/span>\n\t\t\t? <span class=\"hljs-keyword\">new<\/span> ConsoleDumper()\n\t\t\t: <span class=\"hljs-keyword\">new<\/span> WebDumper();\n\t}\n}\n\n$dumper = DumperFactory::getDumper();\n$dumper-&gt;dump(<span class=\"hljs-string\">'PHP abstract class is awesome!'<\/span>);\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>An abstract class cannot be instantiated. It provides an interface for other classes to extend.<\/li><li>An abstract method doesn&#8217;t have an implementation. If a class contains one or more abstract methods, it must be an abstract class.<\/li><li>A class that extends an abstract class needs to implement the abstract methods of the abstract class.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"103\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-abstract-class\/\"\n\t\t\t\tdata-post-title=\"PHP Abstract Class\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"103\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-abstract-class\/\"\n\t\t\t\tdata-post-title=\"PHP Abstract Class\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to use the PHP abstract class to define an interface for other classes to extend.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1753,"menu_order":11,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-103","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/103","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=103"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/103\/revisions"}],"predecessor-version":[{"id":2289,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/103\/revisions\/2289"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1753"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=103"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}