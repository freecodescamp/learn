{"id":2630,"date":"2021-09-11T09:31:40","date_gmt":"2021-09-11T09:31:40","guid":{"rendered":"https:\/\/www.CodeCamp\/php-tutorial\/regex-quantifiers\/"},"modified":"2021-09-11T09:35:54","modified_gmt":"2021-09-11T09:35:54","slug":"regex-quantifiers","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/regex-quantifiers\/","title":{"rendered":"Regex Quantifiers"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use quantifiers in regular expressions to match a number of instances of a character or a character class.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to regex quantifiers<\/h2>\n\n\n\n<p>Quantifiers allow you to match their preceding elements a number of times. The following table shows the list of quantifiers:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Quantifier<\/th><th>Meaning<\/th><\/tr><\/thead><tbody><tr><td><code>*<\/code><\/td><td>Match zero or more times.<\/td><\/tr><tr><td><code>+<\/code><\/td><td>Match one or more times.<\/td><\/tr><tr><td><code>?<\/code><\/td><td>Match zero or one time.<\/td><\/tr><tr><td><code>{<\/code>&nbsp;<em>n<\/em>&nbsp;<code>}<\/code><\/td><td>Match exactly\u00a0<code>n<\/code>\u00a0times.<\/td><\/tr><tr><td><code>{<\/code>&nbsp;<em>n<\/em>&nbsp;<code>,}<\/code><\/td><td>Match at least\u00a0<code>n<\/code>\u00a0times.<\/td><\/tr><tr><td><code>{<\/code>&nbsp;<em>n<\/em>&nbsp;<code>,<\/code>&nbsp;<em>m<\/em>&nbsp;<code>}<\/code><\/td><td>Match from\u00a0<code>n<\/code>\u00a0to\u00a0<code>m<\/code> times.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3 class=\"wp-block-heading\">Match zero or more times (*)<\/h3>\n\n\n\n<p>The <code>*<\/code> quantifier matches its preceding element zero or more times.<\/p>\n\n\n\n<p>The following example uses the <code>*<\/code> quantifier to match text that ends with <code>PHP<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'\/\\w*PHP\/'<\/span>;\n$title = <span class=\"hljs-string\">'CakePHP &amp; FuelPHP are PHP Frameworks'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $title, $matches)) {\n    print_r($matches&#91;<span class=\"hljs-number\">0<\/span>]);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; CakePHP\n    &#91;<span class=\"hljs-number\">1<\/span>] =&gt; FuelPHP\n    &#91;<span class=\"hljs-number\">2<\/span>] =&gt; PHP\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Match one or more times (+)<\/h3>\n\n\n\n<p>The <code>+<\/code> quantifier matches its preceding element one or more times. For example, the <code>\\d+<\/code> matches one or more digits.<\/p>\n\n\n\n<p>The following example uses the <code>+<\/code> quantifier to match one or more digits in a string:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'\/\\d+\/'<\/span>;\n$title = <span class=\"hljs-string\">'PHP 1.0 was released in 1995'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $title, $matches)) {\n    print_r($matches&#91;<span class=\"hljs-number\">0<\/span>]);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; <span class=\"hljs-number\">1<\/span>\n    &#91;<span class=\"hljs-number\">1<\/span>] =&gt; <span class=\"hljs-number\">0<\/span>\n    &#91;<span class=\"hljs-number\">2<\/span>] =&gt; <span class=\"hljs-number\">1995<\/span>\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Match zero or one time (?)<\/h3>\n\n\n\n<p>The <code>?<\/code> quantifier matches its preceding element zero or one time. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'\/behaviou?r\/'<\/span>;\n$title = <span class=\"hljs-string\">'Which is correct behavior or behaviour?'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $title, $matches)) {\n    print_r($matches&#91;<span class=\"hljs-number\">0<\/span>]);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; behavior\n    &#91;<span class=\"hljs-number\">1<\/span>] =&gt; behaviour\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>u?<\/code> matches zero or one character <code>u<\/code>. Therefore, the matches include both <code>behavior<\/code> and <code>behaviour<\/code><\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Match Exactly n Times: {n}<\/h3>\n\n\n\n<p>The <code>{n}<\/code> quantifier matches its preceding element exactly <code>n<\/code> time, where <code>n<\/code> is zero or a positive integer.<\/p>\n\n\n\n<p>The following example uses the quantifier <code>{n}<\/code> to match a time string with the <code>hh:mm<\/code> format:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'\/\\d{2}:\\d{2}\/'<\/span>;\n$title = <span class=\"hljs-string\">\"It was 12:15 AM\"<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $title, $matches)) {\n    print_r($matches&#91;<span class=\"hljs-number\">0<\/span>]);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; <span class=\"hljs-number\">12<\/span>:<span class=\"hljs-number\">15<\/span>\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>\\d{2}<\/code> matches exactly two digits. Therefore, the <code>\\d{2}:\\d{2}<\/code> matches two digits, a colon <code>:<\/code>, and then two digits.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Match at least n times: {n,}<\/h3>\n\n\n\n<p>The {n,} quantifier matches its preceding element at least <code>n<\/code> time, where <code>n<\/code> is zero or a positive integer.<\/p>\n\n\n\n<p>The following example uses the <code>{n, }<\/code> quantifier to match the date strings with the <code>m-d-yyyy<\/code> or <code>mm-dd-yyyy<\/code> format:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'\/\\d{1,}-\\d{1,}-\\d{4}\/'<\/span>;\n$title = <span class=\"hljs-string\">\"1-1-2020 or 01-01-2020 or 1\/1\/2020\"<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $title, $matches)) {\n    print_r($matches&#91;<span class=\"hljs-number\">0<\/span>]);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; <span class=\"hljs-number\">1<\/span><span class=\"hljs-number\">-1<\/span><span class=\"hljs-number\">-2020<\/span>\n    &#91;<span class=\"hljs-number\">1<\/span>] =&gt; <span class=\"hljs-number\">01<\/span><span class=\"hljs-number\">-01<\/span><span class=\"hljs-number\">-2020<\/span>\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Match Between n and m Times: {n,m}<\/h3>\n\n\n\n<p>The <code>{n,m}<\/code> quantifier matches its preceding element at least <code>n<\/code> times, but no more than <code>m<\/code> times, where <code>n<\/code> and <code>m<\/code> are zero or a positive integer.<\/p>\n\n\n\n<p>For example, the regular expression <code>'\/\\d{1,}-\\d{1,}-\\d{1,}\/'<\/code> also matches <code>1000-1000-2020<\/code>. To make it more accurate, you can use the <code>{n, m}<\/code> like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'\/\\d{1,2}-\\d{1,2}-\\d{4}\/'<\/span>;\n$title = <span class=\"hljs-string\">\"1-1-2020 or 01-01-2020 or 1\/1\/2020\"<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $title, $matches)) {\n    print_r($matches&#91;<span class=\"hljs-number\">0<\/span>]);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, <code>\\d{1,2}<\/code> matches one or two digits. Therefore, the <code>\\d{1,2}-\\d{1,2}-\\d{4}<\/code> matches <code>d-m-yyyy<\/code> or <code>dd-mm-yyyy<\/code>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use the quantifier <code>*<\/code> to match its preceding element zero or more times.<\/li><li>Use the quantifier <code>+<\/code> to match its preceding element one or more times.<\/li><li>Use the quantifier <code>?<\/code> to match its preceding element zero or more times.<\/li><li>Use the quantifier <code>{n}<\/code> to match its preceding element exactly <code>n<\/code> times.<\/li><li>Use the quantifier <code>{n, }<\/code> to match its preceding element at least <code>n<\/code> times.<\/li><li>Use the quantifier <code>{n, m}<\/code> to match its preceding element from <code>n<\/code> to <code>m<\/code> times.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2630\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-quantifiers\/\"\n\t\t\t\tdata-post-title=\"Regex Quantifiers\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2630\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-quantifiers\/\"\n\t\t\t\tdata-post-title=\"Regex Quantifiers\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to use quantifiers in regular expressions to match a number of instances of a character or a character class.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":131,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-2630","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2630","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=2630"}],"version-history":[{"count":3,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2630\/revisions"}],"predecessor-version":[{"id":2633,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2630\/revisions\/2633"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=2630"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}