{"id":423,"date":"2021-03-15T07:48:22","date_gmt":"2021-03-15T07:48:22","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=423"},"modified":"2021-06-25T10:51:24","modified_gmt":"2021-06-25T10:51:24","slug":"php-or-operator","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-or-operator\/","title":{"rendered":"PHP OR Operator"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the PHP OR operator (||) and how to use it to build complex logical expressions.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP OR operator<\/h2>\n\n\n\n<p>The logical <code>OR<\/code> operator accepts two operands and returns <code>true<\/code> if either operand is true; otherwise, it returns <code>false<\/code>.  In other words, the logical OR operator returns <code>false<\/code> if both operands are <code>false<\/code>.<\/p>\n\n\n\n<p>To represent the logical OR operator, PHP uses either the <code>or<\/code> keyword or the <code>||<\/code>  as follows:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">expression1 or expression2<\/code><\/span><\/pre>\n\n\n<p>Or<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">expression1 || expression2<\/code><\/span><\/pre>\n\n\n<p>The following table illustrates the result of the <code>or<\/code> operator:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>expression1<\/th><th>expression2<\/th><th>expression1 || expression2<\/th><\/tr><\/thead><tbody><tr><td><code>true<\/code><\/td><td><code>true<\/code><\/td><td><code>true<\/code><\/td><\/tr><tr><td><code>true<\/code><\/td><td><code>false<\/code><\/td><td><code>true<\/code><\/td><\/tr><tr><td><code>false<\/code><\/td><td><code>true<\/code><\/td><td><code>true<\/code><\/td><\/tr><tr><td><code>false<\/code><\/td><td><code>false<\/code><\/td><td><code>false<\/code><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Note that the <code>or<\/code>, <code>Or<\/code>, and <code>OR<\/code> are the same because PHP keywords are case-insensitive. <\/p>\n\n\n\n<p>The <code>||<\/code> and <code>or<\/code> operators return the same result. The only difference between the <code>||<\/code> and <code>or<\/code> operators are their precedences. The <code>or<\/code> operator has higher precedence than the <code>||<\/code> operator. <\/p>\n\n\n\n<h2 class=\"wp-block-heading\">PHP OR operator examples<\/h2>\n\n\n\n<p>Suppose that you need to clear the cache of the website if the flag <code>$exprired<\/code> or <code>$purge<\/code> is set to <code>true<\/code>. To do that, you can use the logical OR operator as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$expired = <span class=\"hljs-keyword\">true<\/span>;\n$purged = <span class=\"hljs-keyword\">false<\/span>;\n\n$clear_cache = $expired || $purged;\n\nvar_dump($clear_cache);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">bool(<span class=\"hljs-literal\">true<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since <code>$expired<\/code> is <code>true<\/code>, the result of the OR operator is also <code>true<\/code>.<\/p>\n\n\n\n<p>However, if you change the <code>$expired<\/code> to <code>false<\/code>, the result will be <code>false<\/code> as shown in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$expired = <span class=\"hljs-keyword\">false<\/span>;\n$purged = <span class=\"hljs-keyword\">false<\/span>;\n\n$clear_cache = $expired || $purged;\n\nvar_dump($clear_cache);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In practice, you often use the logical OR operator in the <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-if\/\">if<\/a>, <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-if-else\/\">if-else<\/a>, <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-if-elseif\/\">if-elseif<\/a>, <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-while\/\">while<\/a>, and <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-do-while\/\">do-while <\/a>statements.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Short-circuiting<\/h2>\n\n\n\n<p>When the first operand is <code>true<\/code>, the logical OR operator knows that the result must be also <code>true<\/code>. In this case, it doesn&#8217;t evaluate the second operand. This process is called short-circuiting. <\/p>\n\n\n\n<p>In practice, you often find that the or operator is used in the following pattern:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">function_call() || <span class=\"hljs-keyword\">die<\/span>(message)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If the <code>function_call()<\/code> returns <code>true<\/code>, it succeeded. PHP will never execute the second operand which is a call to the <code>die()<\/code> function. Otherwise, PHP will call the <code>die()<\/code> function with an error message.<\/p>\n\n\n\n<p>For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">connect_to_db<\/span><span class=\"hljs-params\">()<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">false<\/span>;\n}\n\nconnect_to_db() || <span class=\"hljs-keyword\">die<\/span>(<span class=\"hljs-string\">'Cannot connect to the database.'<\/span>);\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Cannot connect to the database<\/code><\/span><\/pre>\n\n\n<p>In this example, the <code>connect_to_db()<\/code> function returns <code>false<\/code>, PHP calls the <code>die()<\/code> function that shows the error message.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The PHP OR gotchas<\/h2>\n\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$result = <span class=\"hljs-keyword\">false<\/span> <span class=\"hljs-keyword\">or<\/span> <span class=\"hljs-keyword\">true<\/span>;\n\nvar_dump($result);\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">bool(<span class=\"hljs-literal\">false<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, you would expect that the $result is true because false or true expression returns true. However, it is not the case.<\/p>\n\n\n\n<p>When evaluating the following statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$result = <span class=\"hljs-keyword\">false<\/span> <span class=\"hljs-keyword\">or<\/span> <span class=\"hljs-keyword\">true<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PHP evaluates the <code>$result = false<\/code> first and then the <code>or<\/code> operator second because the <code>=<\/code> operator has higher precedence than the <code>or<\/code> operator.<\/p>\n\n\n\n<p class=\"note\">Notice that each operator has precedence. And PHP will evaluate the operators with the higher precedence before the ones with the lower precedence.<\/p>\n\n\n\n<p>Technically, it is equivalent to the following:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">($result = <span class=\"hljs-keyword\">false<\/span>) <span class=\"hljs-keyword\">or<\/span> <span class=\"hljs-keyword\">true<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Therefore, <code>$result<\/code> is assigned the <code>false<\/code> value.<\/p>\n\n\n\n<p>To fix this, you need to use parentheses to change the order of evaluation:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$result = (<span class=\"hljs-keyword\">false<\/span> <span class=\"hljs-keyword\">or<\/span> <span class=\"hljs-keyword\">true<\/span>);\n\nvar_dump($result);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">bool(<span class=\"hljs-literal\">true<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Or you can use the || operator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$result = <span class=\"hljs-keyword\">false<\/span> || <span class=\"hljs-keyword\">true<\/span>;\nvar_dump($result);\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">bool(<span class=\"hljs-literal\">true<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Therefore, it&#8217;s a good practice to always use the <code>||<\/code> operator instead of the <code>or<\/code> operator.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use the PHP OR operator (<code>or<\/code>, <code>||<\/code>) to combine two expressions and returns <code>true<\/code> if either expression is <code>true<\/code>; otherwise, it returns <code>false<\/code>.<\/li><li>The logical OR operator is short-circuiting.<\/li><li>Do use the <code>||<\/code> operator instead of the <code>or<\/code> operator.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"423\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-or-operator\/\"\n\t\t\t\tdata-post-title=\"PHP OR Operator\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"423\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-or-operator\/\"\n\t\t\t\tdata-post-title=\"PHP OR Operator\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the PHP OR operator and how to use it to construct complex logical expressions.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":21,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-423","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/423","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=423"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/423\/revisions"}],"predecessor-version":[{"id":1972,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/423\/revisions\/1972"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=423"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}