{"id":1490,"date":"2021-05-07T00:47:41","date_gmt":"2021-05-07T00:47:41","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=1490"},"modified":"2021-06-27T14:17:32","modified_gmt":"2021-06-27T14:17:32","slug":"php-explode","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-explode\/","title":{"rendered":"php explode"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the PHP <code>explode()<\/code> function to split a string by a separator into an array of strings.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP explode() function<\/h2>\n\n\n\n<p>The PHP <code>explode()<\/code> function returns an <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-array\/\">array<\/a> of <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-string\/\">strings<\/a> by splitting a string by a separator. The following shows the syntax of the <code>explode()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">explode ( string $separator , string $string , int $limit = PHP_INT_MAX ) : <span class=\"hljs-keyword\">array<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>explode()<\/code> function has the following parameters:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li><code>$separator<\/code> is the delimiter that the <code>explode()<\/code> function uses to split the $string.<\/li><li><code>$string<\/code> is the input string<\/li><li><code>$limit<\/code> specifies how the function will return the result array.<\/li><\/ul>\n\n\n\n<p>If the <code>$limit<\/code> is positive, the <code>explode()<\/code> function returns an array with <code>$limit<\/code> elements where the last element containing the rest of the string.<\/p>\n\n\n\n<p>If the <code>$limit<\/code> is zero, <code>explode()<\/code> function interprets it as one. So the function returns an array with the original string.<\/p>\n\n\n\n<p>If the <code>$limit<\/code> is negative, the <code>explode()<\/code> function splits the $string using the <code>$separator<\/code>. Also, it removes the last <code>$limit<\/code> elements from the result array.<\/p>\n\n\n\n<p class=\"note\">Prior to PHP 8.0.0, the <code>explode()<\/code> function returns false if the $separator is an empty string. Starting from PHP 8.0.0, the <code>explode()<\/code> function throws a <code>ValueError<\/code> instead.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">PHP explode() function examples<\/h2>\n\n\n\n<p>Let&#8217;s take some examples of using the <code>explode()<\/code> function.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">1) Simple the PHP explode() function example<\/h3>\n\n\n\n<p>The following example uses the <code>explode()<\/code> function to split a string by a comma (<code>,<\/code>):<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$str = <span class=\"hljs-string\">'first_name,last_name,email,phone'<\/span>;\n$headers = explode(<span class=\"hljs-string\">','<\/span>, $str);\n\nprint_r($headers);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array<\/span>(<span class=\"hljs-number\">4<\/span>) \n{ \n    &#91;<span class=\"hljs-number\">0<\/span>]=&gt; string(<span class=\"hljs-number\">10<\/span>) <span class=\"hljs-string\">\"first_name\"<\/span> \n    &#91;<span class=\"hljs-number\">1<\/span>]=&gt; string(<span class=\"hljs-number\">9<\/span>) <span class=\"hljs-string\">\"last_name\"<\/span> \n    &#91;<span class=\"hljs-number\">2<\/span>]=&gt; string(<span class=\"hljs-number\">5<\/span>) <span class=\"hljs-string\">\"email\"<\/span> \n    &#91;<span class=\"hljs-number\">3<\/span>]=&gt; string(<span class=\"hljs-number\">5<\/span>) <span class=\"hljs-string\">\"phone\"<\/span> \n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"481\" height=\"192\" src=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/05\/php-explode.png\" alt=\"\" class=\"wp-image-1493\" srcset=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/05\/php-explode.png 481w, https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/05\/php-explode-300x120.png 300w\" sizes=\"auto, (max-width: 481px) 100vw, 481px\" \/><\/figure>\n\n\n\n<h3 class=\"wp-block-heading\">2) Using the PHP explode() function with a positive $limit<\/h3>\n\n\n\n<p>The following example uses the <code>explode()<\/code> function with the a positive <code>$limit<\/code> argument:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$str = <span class=\"hljs-string\">'first_name,last_name,email,phone'<\/span>;\n$headers = explode(<span class=\"hljs-string\">','<\/span>, $str, <span class=\"hljs-number\">3<\/span>);\n\nvar_dump($headers);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array<\/span>(<span class=\"hljs-number\">3<\/span>) \n{ \n    &#91;<span class=\"hljs-number\">0<\/span>]=&gt; string(<span class=\"hljs-number\">10<\/span>) <span class=\"hljs-string\">\"first_name\"<\/span> \n    &#91;<span class=\"hljs-number\">1<\/span>]=&gt; string(<span class=\"hljs-number\">9<\/span>) <span class=\"hljs-string\">\"last_name\"<\/span> \n    &#91;<span class=\"hljs-number\">2<\/span>]=&gt; string(<span class=\"hljs-number\">5<\/span>) <span class=\"hljs-string\">\"email,phone\"<\/span> \n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>As shown clearly in the output, the returned array contains three elements specified by the <code>$limit<\/code> argument. Also, the last element has the remaining string.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">3) Using the PHP explode() function with a negative $limit<\/h3>\n\n\n\n<p>The following example uses the <code>explode()<\/code> function with the a negative <code>$limit<\/code> argument:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$str = <span class=\"hljs-string\">'first_name,last_name,email,phone'<\/span>;\n$headers = explode(<span class=\"hljs-string\">','<\/span>, $str, <span class=\"hljs-number\">-1<\/span>);\n\nvar_dump($headers);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array<\/span>(<span class=\"hljs-number\">3<\/span>) \n{ \n    &#91;<span class=\"hljs-number\">0<\/span>]=&gt; string(<span class=\"hljs-number\">10<\/span>) <span class=\"hljs-string\">\"first_name\"<\/span> \n    &#91;<span class=\"hljs-number\">1<\/span>]=&gt; string(<span class=\"hljs-number\">9<\/span>) <span class=\"hljs-string\">\"last_name\"<\/span> \n    &#91;<span class=\"hljs-number\">2<\/span>]=&gt; string(<span class=\"hljs-number\">5<\/span>) <span class=\"hljs-string\">\"email\"<\/span> \n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>explode()<\/code> function returns an array of the string split by the comma (<code>,<\/code>). Also, it excludes the last element from the result array.<\/p>\n\n\n\n<p>If you use <code>-2<\/code> instead of &#8211;<code>1<\/code> for the <code>$limit<\/code>, the <code>explode()<\/code> function will remove the last 2 elements. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$str = <span class=\"hljs-string\">'first_name,last_name,email,phone'<\/span>;\n$headers = explode(<span class=\"hljs-string\">','<\/span>, $str, <span class=\"hljs-number\">-1<\/span>);\n\nvar_dump($headers);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array<\/span>(<span class=\"hljs-number\">2<\/span>) \n{ \n    &#91;<span class=\"hljs-number\">0<\/span>]=&gt; string(<span class=\"hljs-number\">10<\/span>) <span class=\"hljs-string\">\"first_name\"<\/span> \n    &#91;<span class=\"hljs-number\">1<\/span>]=&gt; string(<span class=\"hljs-number\">9<\/span>) <span class=\"hljs-string\">\"last_name\"<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">4) A practical example of the PHP explode() function<\/h3>\n\n\n\n<p>The following <code>str_after()<\/code> function returns the remainder of a string after the first occurrence of a string:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">str_after<\/span><span class=\"hljs-params\">($str, $search)<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $search === <span class=\"hljs-string\">''<\/span> ? $str : array_reverse(explode($search, $str, <span class=\"hljs-number\">2<\/span>))&#91;<span class=\"hljs-number\">0<\/span>];\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>First, split the string into an array of two elements separated by the <code>$search<\/code> string.<\/li><li>Second, reverse the result array and return the first element of the result array.<\/li><\/ul>\n\n\n\n<p>The following example uses the <code>str_after()<\/code> function to get the domain name part of an email:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n<span class=\"hljs-comment\">\/\/ ...<\/span>\n\n<span class=\"hljs-keyword\">echo<\/span> str_after(<span class=\"hljs-string\">'john.doe@CodeCamp'<\/span>, <span class=\"hljs-string\">'@'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">CodeCamp<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use the PHP <code>explode()<\/code> function to return an array of strings by splitting a string by a separator.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1490\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-explode\/\"\n\t\t\t\tdata-post-title=\"php explode\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1490\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-explode\/\"\n\t\t\t\tdata-post-title=\"php explode\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to use the PHP explode() function to split a string by a separator into an array of strings.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":113,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-1490","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1490","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=1490"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1490\/revisions"}],"predecessor-version":[{"id":2066,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1490\/revisions\/2066"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=1490"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}