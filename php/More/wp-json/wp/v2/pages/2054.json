{"id":2054,"date":"2021-06-27T09:10:15","date_gmt":"2021-06-27T09:10:15","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=2054"},"modified":"2021-06-27T09:10:43","modified_gmt":"2021-06-27T09:10:43","slug":"php-__invoke","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-oop\/php-__invoke\/","title":{"rendered":"PHP __invoke"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the PHP <code>__invoke()<\/code> magic method and how to use it effectively.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP __invoke() magic method<\/h2>\n\n\n\n<p>Suppose that you have a <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-objects\/\">class<\/a> called <code>MyClass<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MyClass<\/span> \n<\/span>{\n    <span class=\"hljs-comment\">\/\/ ...<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Typically, you create a new instance of the <code>MyClass<\/code> and access its methods and properties like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$instance = <span class=\"hljs-keyword\">new<\/span> MyClass();\n$instance-&gt;methodName();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Or if the <code>MyClass<\/code> has <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-static-methods\/\">static methods<\/a>, you can access them using the <code>::<\/code> operator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">MyClass::staticMethod();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Besides using the <code>MyClass<\/code> these ways, PHP allows you to use the object of the class as a <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-functions\/\">function<\/a>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$instance($arguments);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this case, PHP will call the <code>__invoke()<\/code> method of the <code>MyClass<\/code>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MyClass<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__invoke<\/span><span class=\"hljs-params\">(...$arguments)<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'Called to the __invoke method'<\/span>;\n    }\n}\n\n$instance = <span class=\"hljs-keyword\">new<\/span> MyClass;\n$instance();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">Called to the __invoke method<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>$instance<\/code> is known as a function object or functor.<\/p>\n\n\n\n<p>The <code>__invoke()<\/code> magic method has the following syntax:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">__invoke( ...$values): mixed<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PHP will call the <code>__invoke()<\/code> magic method when you call an object as a function.<\/p>\n\n\n\n<p>Also, the object of the class that implements the <code>__invoke()<\/code> magic method is a callable. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">echo<\/span> is_callable($instance) ? <span class=\"hljs-string\">'yes'<\/span> : <span class=\"hljs-string\">'no'<\/span>; <span class=\"hljs-comment\">\/\/ yes<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>$instance<\/code> of the MyClass is a callable. This means that you can pass it to any function or method that accepts a callable.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Practical PHP __invoke() magic method example<\/h2>\n\n\n\n<p>Suppose that you have an <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-multidimensional-array\/\">array<\/a> of customer data like this;<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$customers = &#91;\n    &#91;<span class=\"hljs-string\">'id'<\/span> =&gt; <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-string\">'name'<\/span> =&gt; <span class=\"hljs-string\">'John'<\/span>, <span class=\"hljs-string\">'credit'<\/span> =&gt; <span class=\"hljs-number\">20000<\/span>],\n    &#91;<span class=\"hljs-string\">'id'<\/span> =&gt; <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-string\">'name'<\/span> =&gt; <span class=\"hljs-string\">'Alice'<\/span>, <span class=\"hljs-string\">'credit'<\/span> =&gt; <span class=\"hljs-number\">10000<\/span>],\n    &#91;<span class=\"hljs-string\">'id'<\/span> =&gt; <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-string\">'name'<\/span> =&gt; <span class=\"hljs-string\">'Bob'<\/span>, <span class=\"hljs-string\">'credit'<\/span> =&gt; <span class=\"hljs-number\">15000<\/span>]\n];<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To sort the customers by name or credit, you can use the <code>usort()<\/code> function. The second parameter of the <code>usort()<\/code> function is a callable that determines the sort order:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">usort(<span class=\"hljs-keyword\">array<\/span> &amp;$array, callable $callback): bool\r<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following defines the class <code>Comparator<\/code> that implements the <code>__invoke()<\/code> magic method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Comparator<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">private<\/span> $key;\n\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__construct<\/span><span class=\"hljs-params\">(string $key)<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">$this<\/span>-&gt;key = $key;\n    }\n\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__invoke<\/span><span class=\"hljs-params\">($a, $b)<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">return<\/span> $a&#91;<span class=\"hljs-keyword\">$this<\/span>-&gt;key] &lt;=&gt; $b&#91;<span class=\"hljs-keyword\">$this<\/span>-&gt;key];\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>__invoke()<\/code> method returns the result of the comparison of two array elements by a specified key.<\/p>\n\n\n\n<p>To use the <code>Comparator<\/code> class, you can create a new instance of the class and pass it to the <code>usort()<\/code> function as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">usort($customers, <span class=\"hljs-keyword\">new<\/span> Comparator(<span class=\"hljs-string\">'name'<\/span>));<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This statement sorts the customers by name.<\/p>\n\n\n\n<p>To sort the customers by credit, you can use the credit as the key like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">usort($customers, <span class=\"hljs-keyword\">new<\/span> Comparator(<span class=\"hljs-string\">'credit'<\/span>));<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Put it all together.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Comparator<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">private<\/span> $key;\n\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__construct<\/span><span class=\"hljs-params\">(string $key)<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">$this<\/span>-&gt;key = $key;\n    }\n\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__invoke<\/span><span class=\"hljs-params\">($a, $b)<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">return<\/span> $a&#91;<span class=\"hljs-keyword\">$this<\/span>-&gt;key] &lt;=&gt; $b&#91;<span class=\"hljs-keyword\">$this<\/span>-&gt;key];\n    }\n}\n\n$customers = &#91;\n    &#91;<span class=\"hljs-string\">'id'<\/span> =&gt; <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-string\">'name'<\/span> =&gt; <span class=\"hljs-string\">'John'<\/span>, <span class=\"hljs-string\">'credit'<\/span> =&gt; <span class=\"hljs-number\">20000<\/span>],\n    &#91;<span class=\"hljs-string\">'id'<\/span> =&gt; <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-string\">'name'<\/span> =&gt; <span class=\"hljs-string\">'Alice'<\/span>, <span class=\"hljs-string\">'credit'<\/span> =&gt; <span class=\"hljs-number\">10000<\/span>],\n    &#91;<span class=\"hljs-string\">'id'<\/span> =&gt; <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-string\">'name'<\/span> =&gt; <span class=\"hljs-string\">'Bob'<\/span>, <span class=\"hljs-string\">'credit'<\/span> =&gt; <span class=\"hljs-number\">15000<\/span>]\n];\n\n<span class=\"hljs-comment\">\/\/ sort customers by names<\/span>\nusort($customers, <span class=\"hljs-keyword\">new<\/span> Comparator(<span class=\"hljs-string\">'name'<\/span>));\nprint_r($customers);\n\n<span class=\"hljs-comment\">\/\/ sort customers by credit<\/span>\nusort($customers, <span class=\"hljs-keyword\">new<\/span> Comparator(<span class=\"hljs-string\">'credit'<\/span>));\nprint_r($customers);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use the <code>__invoke()<\/code> magic method is invoked when you call an object as a function.<\/li><li>An object of a class that implements the <code>__invoke()<\/code> is known as a function object or functor. It&#8217;s also a callable.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2054\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-__invoke\/\"\n\t\t\t\tdata-post-title=\"PHP __invoke\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2054\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-__invoke\/\"\n\t\t\t\tdata-post-title=\"PHP __invoke\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the PHP __invoke() magic method and how to use it effectively.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1753,"menu_order":22,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-2054","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2054","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=2054"}],"version-history":[{"count":1,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2054\/revisions"}],"predecessor-version":[{"id":2055,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2054\/revisions\/2055"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1753"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=2054"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}