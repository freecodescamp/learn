{"id":105,"date":"2021-03-08T00:20:33","date_gmt":"2021-03-08T00:20:33","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=105"},"modified":"2021-07-12T09:20:15","modified_gmt":"2021-07-12T09:20:15","slug":"php-interface","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-oop\/php-interface\/","title":{"rendered":"PHP Interface"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the PHP interface and how to use an interface to define a contract between classes.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP interface<\/h2>\n\n\n\n<p>An interface allows you to specify a contract that a <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-objects-and-classes\/\">class <\/a>must implement. To define an interface, you use the <code>interface<\/code> keyword as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">MyInterface<\/span>\n<\/span>{\n\t<span class=\"hljs-comment\">\/\/...<\/span>\n}\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>An interface consists of methods that contain no implementation. In other words, all methods of the interface are abstract methods. An interface can also include constants. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">MyInterface<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">const<\/span> CONSTANT_NAME = <span class=\"hljs-number\">1<\/span>;\n\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">methodName<\/span><span class=\"hljs-params\">()<\/span><\/span>;\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p class=\"note\">Note that all the methods in the interface must be public.<\/p>\n\n\n\n<p>When you define a class (child class) that reuses properties and methods of another class (parent class), the child class <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-inheritance\/\">extends the parent class<\/a>. <\/p>\n\n\n\n<p>However, for interfaces, we say that a class implements an interface.&nbsp;<\/p>\n\n\n\n<p>A class can inherit from one class only. Howeer, it can implement multiple interfaces.<\/p>\n\n\n\n<p>To define a class that implements an interface, you use the&nbsp;<code>implements<\/code> keyword as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">MyInterface<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">const<\/span> CONSTANT_NAME = <span class=\"hljs-number\">1<\/span>;\n\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">methodName<\/span><span class=\"hljs-params\">()<\/span><\/span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MyClass<\/span> <span class=\"hljs-keyword\">implements<\/span> <span class=\"hljs-title\">MyInterface<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">methodName<\/span><span class=\"hljs-params\">()<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-comment\">\/\/ ...<\/span>\n\t}\n}\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When a class implements an interface, it&#8217;s called a <strong>concrete class<\/strong>. The concrete class needs to implement all the methods of the interface.<\/p>\n\n\n\n<p>Like a <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-objects\/\">class<\/a>, an interface can extend another interface using the <code>extends<\/code> keyword. The following example shows how the <code>Document<\/code> interface extends the <code>Readable<\/code> interface:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">Readable<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">read<\/span><span class=\"hljs-params\">()<\/span><\/span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">Document<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Readable<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getContents<\/span><span class=\"hljs-params\">()<\/span><\/span>;\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Why should you use PHP interfaces?<\/h3>\n\n\n\n<p>The following are reasons for using interfaces:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>By implementing an interface, the object&#8217;s caller needs to care only about the object&#8217;s interface, not implementations of the object&#8217;s methods. Therefore you can change the implementations without affecting the caller of the interface.<\/li><li>An interface allows unrelated classes to implement the same set of methods, regardless of their positions in the class inheritance hierarchy.<\/li><li>An interface enables you to model multiple inheritances because a class can implement more than one interface.<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">PHP interface example<\/h2>\n\n\n\n<p>In the following example, we will show you how to use the interface to make the system more flexible and easier to extend. Suppose you have to create a logger that can log a message.<\/p>\n\n\n\n<p>First, create an interface called <code>Logger<\/code> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">Logger<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">log<\/span><span class=\"hljs-params\">($message)<\/span><\/span>;\n}\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, create a <code>FileLogger<\/code>&nbsp;class that writes the log messages to a file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">Logger<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">log<\/span><span class=\"hljs-params\">($message)<\/span><\/span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">FileLogger<\/span> <span class=\"hljs-keyword\">implements<\/span> <span class=\"hljs-title\">Logger<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">private<\/span> $handle;\n\n\t<span class=\"hljs-keyword\">private<\/span> $logFile;\n\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__construct<\/span><span class=\"hljs-params\">($filename, $mode = <span class=\"hljs-string\">'a'<\/span>)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">$this<\/span>-&gt;logFile = $filename;\n\t\t<span class=\"hljs-comment\">\/\/ open log file for append<\/span>\n\t\t<span class=\"hljs-keyword\">$this<\/span>-&gt;handle = fopen($filename, $mode)\n\t\t\t\t<span class=\"hljs-keyword\">or<\/span> <span class=\"hljs-keyword\">die<\/span>(<span class=\"hljs-string\">'Could not open the log file'<\/span>);\n\t}\n\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">log<\/span><span class=\"hljs-params\">($message)<\/span>\n\t<\/span>{\n\t\t$message = date(<span class=\"hljs-string\">'F j, Y, g:i a'<\/span>) . <span class=\"hljs-string\">': '<\/span> . $message . <span class=\"hljs-string\">\"\\n\"<\/span>;\n\t\tfwrite(<span class=\"hljs-keyword\">$this<\/span>-&gt;handle, $message);\n\t}\n\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__destruct<\/span><span class=\"hljs-params\">()<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">$this<\/span>-&gt;handle) {\n\t\t\tfclose(<span class=\"hljs-keyword\">$this<\/span>-&gt;handle);\n\t\t}\n\t}\n}\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, use the <code>FileLogger<\/code> class as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$logger = <span class=\"hljs-keyword\">new<\/span> FileLogger(<span class=\"hljs-string\">'.\/log.txt'<\/span>, <span class=\"hljs-string\">'w'<\/span>);\n$logger-&gt;log(<span class=\"hljs-string\">'PHP interfae is awesome'<\/span>);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following adds another logger that logs information to the database. For demonstration purposes, we make the <code>DatabaseLogger<\/code> class as simple as possible:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">DatabaseLogger<\/span> <span class=\"hljs-keyword\">implements<\/span> <span class=\"hljs-title\">Logger<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">log<\/span><span class=\"hljs-params\">($message)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">echo<\/span> sprintf(<span class=\"hljs-string\">\"Log %s to the database\\n\"<\/span>, $message);\n\t}\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And you can easily add other kinds of loggers that implement the <code>Logger<\/code> interface without touching existing loggers.<\/p>\n\n\n\n<p>The following code snippet demonstrates how to use multiple loggers at the same time using a single <code>ILogger<\/code> interface:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$loggers = &#91;\n\t<span class=\"hljs-keyword\">new<\/span> FileLogger(<span class=\"hljs-string\">'.\/log.txt'<\/span>),\n\t<span class=\"hljs-keyword\">new<\/span> DatabaseLogger()\n];\n\n<span class=\"hljs-keyword\">foreach<\/span> ($loggers <span class=\"hljs-keyword\">as<\/span> $logger) {\n\t$logger-&gt;log(<span class=\"hljs-string\">'Log message'<\/span>);\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Put it all together.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface<\/span> <span class=\"hljs-title\">Logger<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">log<\/span><span class=\"hljs-params\">($message)<\/span><\/span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">FileLogger<\/span> <span class=\"hljs-keyword\">implements<\/span> <span class=\"hljs-title\">Logger<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">private<\/span> $handle;\n\n\t<span class=\"hljs-keyword\">private<\/span> $logFile;\n\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__construct<\/span><span class=\"hljs-params\">($filename, $mode = <span class=\"hljs-string\">'a'<\/span>)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">$this<\/span>-&gt;logFile = $filename;\n\t\t<span class=\"hljs-comment\">\/\/ open log file for append<\/span>\n\t\t<span class=\"hljs-keyword\">$this<\/span>-&gt;handle = fopen($filename, $mode)\n\t\t\t\t<span class=\"hljs-keyword\">or<\/span> <span class=\"hljs-keyword\">die<\/span>(<span class=\"hljs-string\">'Could not open the log file'<\/span>);\n\t}\n\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">log<\/span><span class=\"hljs-params\">($message)<\/span>\n\t<\/span>{\n\t\t$message = date(<span class=\"hljs-string\">'F j, Y, g:i a'<\/span>) . <span class=\"hljs-string\">': '<\/span> . $message . <span class=\"hljs-string\">\"\\n\"<\/span>;\n\t\tfwrite(<span class=\"hljs-keyword\">$this<\/span>-&gt;handle, $message);\n\t}\n\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__destruct<\/span><span class=\"hljs-params\">()<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">$this<\/span>-&gt;handle) {\n\t\t\tfclose(<span class=\"hljs-keyword\">$this<\/span>-&gt;handle);\n\t\t}\n\t}\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">DatabaseLogger<\/span> <span class=\"hljs-keyword\">implements<\/span> <span class=\"hljs-title\">Logger<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">log<\/span><span class=\"hljs-params\">($message)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">echo<\/span> sprintf(<span class=\"hljs-string\">\"Log %s to the database\\n\"<\/span>, $message);\n\t}\n}\n\n<span class=\"hljs-comment\">\/\/ examle 1<\/span>\n$logger = <span class=\"hljs-keyword\">new<\/span> FileLogger(<span class=\"hljs-string\">'.\/log.txt'<\/span>, <span class=\"hljs-string\">'w'<\/span>);\n$logger-&gt;log(<span class=\"hljs-string\">'PHP interfae is awesome'<\/span>);\n\n<span class=\"hljs-comment\">\/\/ example 2<\/span>\n$loggers = &#91;\n\t<span class=\"hljs-keyword\">new<\/span> FileLogger(<span class=\"hljs-string\">'.\/log.txt'<\/span>),\n\t<span class=\"hljs-keyword\">new<\/span> DatabaseLogger()\n];\n\n<span class=\"hljs-keyword\">foreach<\/span> ($loggers <span class=\"hljs-keyword\">as<\/span> $logger) {\n\t$logger-&gt;log(<span class=\"hljs-string\">'Log message'<\/span>);\n}\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p class=\"Note\">Note that in the real-world application, you should separate interfaces and classes in separate files.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>PHP interface provides a contract for other classes to follow (or implement).<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"105\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-interface\/\"\n\t\t\t\tdata-post-title=\"PHP Interface\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"105\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-interface\/\"\n\t\t\t\tdata-post-title=\"PHP Interface\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the PHP interface and how to use it to define a contract between classes.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1753,"menu_order":12,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-105","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/105","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=105"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/105\/revisions"}],"predecessor-version":[{"id":2291,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/105\/revisions\/2291"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1753"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=105"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}