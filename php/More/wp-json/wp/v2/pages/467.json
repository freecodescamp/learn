{"id":467,"date":"2021-03-17T01:57:27","date_gmt":"2021-03-17T01:57:27","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=467"},"modified":"2021-11-03T15:00:15","modified_gmt":"2021-11-03T15:00:15","slug":"php-default-parameters","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-default-parameters\/","title":{"rendered":"PHP Default Parameters"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about PHP default parameters and default parameters to simplify the function calls.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP default parameters<\/h2>\n\n\n\n<p>The following defines the <code>concat()<\/code> function that concatenates two strings with a delimiter:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">concat<\/span><span class=\"hljs-params\">($str1, $str2, $delimiter)<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $str1 . $delimiter . $str2;\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you call the <code>concat()<\/code> function, you need to pass exactly three arguments. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">concat<\/span><span class=\"hljs-params\">($str1, $str2, $delimiter)<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $str1 . $delimiter . $str2;\n}\n\n$message = concat(<span class=\"hljs-string\">'Hi'<\/span>, <span class=\"hljs-string\">'there!'<\/span>, <span class=\"hljs-string\">' '<\/span>);\n\n<span class=\"hljs-keyword\">echo<\/span> $message;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, you&#8217;ll find that you often use the space &#8216; &#8216; as the delimiter. And it&#8217;s repetitive to pass the space whenever you call the function.<\/p>\n\n\n\n<p>This is why default parameters come into play.<\/p>\n\n\n\n<p>PHP allows you to specify a default argument for a parameter. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">concat<\/span><span class=\"hljs-params\">($str1, $str2, $delimiter = <span class=\"hljs-string\">' '<\/span>)<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $str1 . $delimiter . $str2;\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>$delimiter<\/code> parameter takes the space as the default argument.<\/p>\n\n\n\n<p>When you call the <code>concat()<\/code> function and don&#8217;t pass the delimiter argument, the function will use the space for the <code>$delimiter<\/code> like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">concat<\/span><span class=\"hljs-params\">($str1, $str2, $delimiter = <span class=\"hljs-string\">' '<\/span>)<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $str1 . $delimiter . $str2;\n}\n\n$message = concat(<span class=\"hljs-string\">'Hi'<\/span>, <span class=\"hljs-string\">'there!'<\/span>);\n\n<span class=\"hljs-keyword\">echo<\/span> $message;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Hi there<\/code><\/span><\/pre>\n\n\n<p>However, if you pass an argument for the <code>$delimiter<\/code>, the function will use that argument instead:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">concat<\/span><span class=\"hljs-params\">($str1, $str2, $delimiter = <span class=\"hljs-string\">' '<\/span>)<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $str1 . $delimiter . $str2;\n}\n\n$message = concat(<span class=\"hljs-string\">'Hi'<\/span>, <span class=\"hljs-string\">'there!'<\/span>, <span class=\"hljs-string\">','<\/span>);\n\n<span class=\"hljs-keyword\">echo<\/span> $message;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Hi,there!<\/code><\/span><\/pre>\n\n\n<p>In this example, we passed a comma to the <code>$delimiter<\/code>. The <code>concat()<\/code> function used the comma (<code>,<\/code>) instead of the default argument.<\/p>\n\n\n\n<p>When you specify a default argument for a parameter, the parameter becomes optional. It means that you can pass a value or skip it.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Default arguments<\/h2>\n\n\n\n<p>The default arguments must be constant expressions. They cannot be <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-variables\/\">variables<\/a> or function calls. <\/p>\n\n\n\n<p>PHP allows you to use a scalar value, an <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-array\/\">array<\/a>, and <code>null<\/code> as the default arguments. <\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The order of default parameters<\/h2>\n\n\n\n<p>When you use default parameters, it&#8217;s a good practice to place them after the parameters that don&#8217;t have default values. Otherwise, you will get unexpected behavior. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">concat<\/span><span class=\"hljs-params\">($delimiter = <span class=\"hljs-string\">' '<\/span>, $str1, $str2)<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">return<\/span> $str1 . $delimiter . $str2;\n}\n\n$message = concat(<span class=\"hljs-string\">'Hi'<\/span>, <span class=\"hljs-string\">'there!'<\/span>, <span class=\"hljs-string\">','<\/span>);\n\n<span class=\"hljs-keyword\">echo<\/span> $message;\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">there!Hi,<\/code><\/span><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use default parameters to simplify the function calls.<\/li><li>Default parameters are optional.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"467\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-default-parameters\/\"\n\t\t\t\tdata-post-title=\"PHP Default Parameters\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"467\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-default-parameters\/\"\n\t\t\t\tdata-post-title=\"PHP Default Parameters\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you&#8217;ll learn about PHP default parameters and default parameters to simplify the function calls. Introduction to the PHP default parameters The following defines the concat() function that concatenates two strings with a delimiter: When you call the concat() function, you need to pass exactly three arguments. For example: However, you&#8217;ll find [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":36,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-467","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/467","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=467"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/467\/revisions"}],"predecessor-version":[{"id":2858,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/467\/revisions\/2858"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=467"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}