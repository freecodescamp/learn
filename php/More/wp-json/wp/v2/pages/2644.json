{"id":2644,"date":"2021-09-12T03:32:53","date_gmt":"2021-09-12T03:32:53","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=2644"},"modified":"2021-09-12T09:16:08","modified_gmt":"2021-09-12T09:16:08","slug":"regex-non-greedy-lazy","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/regex-non-greedy-lazy\/","title":{"rendered":"Regex Non-greedy (or Lazy)"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the regex non-greedy (or lazy) quantifiers that match their preceding elements as few times as possible.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the regex non-greedy (or lazy) quantifiers<\/h2>\n\n\n\n<p>In <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-regular-expressions\/\">regular expressions<\/a>, the <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-quantifiers\/\">quantifiers<\/a> have two versions: greedy and non-greedy (or lazy). In the <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-greedy\/\">previous tutorial<\/a>, you learned how <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-greedy\/\">greedy quantifiers<\/a> work.<\/p>\n\n\n\n<p>To turn a greedy quantifier into a non-greedy quantifier, you can append a question mark (<code>?<\/code>) to it. The following table shows the greedy and non-greedy quantifiers:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Greedy quantifier<\/th><th>Lazy quantifier<\/th><th>Meaning<\/th><\/tr><\/thead><tbody><tr><td><code>*<\/code><\/td><td><code>*?<\/code><\/td><td>Match its preceding element zero or more times.<\/td><\/tr><tr><td><code>+<\/code><\/td><td><code>+?<\/code><\/td><td>Match its preceding element one or more times.<\/td><\/tr><tr><td><code>?<\/code><\/td><td><code>??<\/code><\/td><td>Match its preceding element zero or one time.<\/td><\/tr><tr><td><code>{<\/code>&nbsp;<em>n<\/em>&nbsp;<code>}<\/code><\/td><td><code>{<\/code>&nbsp;<em>n<\/em>&nbsp;<code>}?<\/code><\/td><td>Match its preceding element exactly\u00a0<em>n<\/em>\u00a0times.<\/td><\/tr><tr><td><code>{<\/code>&nbsp;<em>n<\/em>&nbsp;<code>,}<\/code><\/td><td><code>{<\/code>&nbsp;<em>n<\/em>&nbsp;<code>,}?<\/code><\/td><td>Match its preceding element at least\u00a0<em>n<\/em>\u00a0times.<\/td><\/tr><tr><td><code>{<\/code>&nbsp;<em>n<\/em>&nbsp;<code>,<\/code>&nbsp;<em>m<\/em>&nbsp;<code>}<\/code><\/td><td><code>{<\/code>&nbsp;<em>n<\/em>&nbsp;<code>,<\/code>&nbsp;<em>m<\/em>&nbsp;<code>}?<\/code><\/td><td>Match its preceding element from\u00a0<em>n<\/em>\u00a0to\u00a0<em>m<\/em>\u00a0times.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>The following example uses the non-greedy quantifier (<code>+?<\/code>) to match the text within the quotes (<code>\"\"<\/code>):<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\r\n\r\n$str = <span class=\"hljs-string\">'&lt;a href=\"\/\" title=\"Go to homepage\"&gt;Home&lt;\/a&gt;'<\/span>;\r\n\r\n$pattern = <span class=\"hljs-string\">'\/\".+?\"\/'<\/span>;\r\n\r\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $str, $matches)) {\r\n    print_r($matches&#91;<span class=\"hljs-number\">0<\/span>]);\r\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\r\n(\r\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; <span class=\"hljs-string\">\"\/\"<\/span>\r\n    &#91;<span class=\"hljs-number\">1<\/span>] =&gt; <span class=\"hljs-string\">\"Go to homepage\"<\/span>\r\n)\r<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How the non-greedy quantifier (+? ) works.<\/p>\n\n\n\n<p>First, the regex engine searches for a match starting from the first position in the string. Because the regex engine cannot find a match, it continues searching until it finds the first quote (<code>\"<\/code>):<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" src=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/09\/regex-non-greedy.svg\" alt=\"\" class=\"wp-image-2666\"\/><\/figure>\n\n\n\n<p>Second, the regex engine finds a match for the rule <code>.+?<\/code> . However, the non-greedy quantifier <code>+?<\/code> just matches <strong>one time<\/strong>, <strong>not multiple times<\/strong> to the end of the string like the greedy quantifier (<code>+<\/code>). And the regex engine immediately looks at the next rule in the pattern, which matches a quote (&#8220;):<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" src=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/09\/regex-non-greedy-first-match.svg\" alt=\"\" class=\"wp-image-2667\"\/><\/figure>\n\n\n\n<p>Third, the regex engine repeats the first and second steps starting from the position after the first match and returns the next result:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" src=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/09\/regex-non-greedy-second-match.svg\" alt=\"\" class=\"wp-image-2669\"\/><\/figure>\n\n\n\n<p>Finally, the regex engine continues to search till the end of the string:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" src=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/09\/regex-non-greedy-result.svg\" alt=\"\" class=\"wp-image-2668\"\/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Append a question mark (?) to a quantifier to turn it into a non-greedy quantifier.<\/li><li>A non-greedy quantifer tries to match its preceding element as few times as possible.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2644\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-non-greedy-lazy\/\"\n\t\t\t\tdata-post-title=\"Regex Non-greedy (or Lazy)\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2644\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-non-greedy-lazy\/\"\n\t\t\t\tdata-post-title=\"Regex Non-greedy (or Lazy)\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the regex non-greedy (or lazy) quantifiers that match an element as few times as possible.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":133,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-2644","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2644","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=2644"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2644\/revisions"}],"predecessor-version":[{"id":2672,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2644\/revisions\/2672"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=2644"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}