{"id":2311,"date":"2021-07-15T10:07:16","date_gmt":"2021-07-15T10:07:16","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=2311"},"modified":"2021-07-15T10:36:21","modified_gmt":"2021-07-15T10:36:21","slug":"php-class_exists","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-oop\/php-class_exists\/","title":{"rendered":"PHP class_exists"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the PHP <code>class_exists()<\/code> function to check if a class exists or not.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP class_exists() function<\/h2>\n\n\n\n<p>The <code>class_exists()<\/code> function accepts a <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-objects\/\">class name<\/a> and returns <code>true<\/code> if the class exists or <code>false<\/code> otherwise.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">class_exists(string $class, bool $autoload = <span class=\"hljs-keyword\">true<\/span>): bool<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>class_exists()<\/code> function has two parameters:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li><code>$class<\/code> specifies the name of the class to check.<\/li><li><code>$autoload<\/code> determines whether to call <code>spl_autoload_register()<\/code> by default.<\/li><\/ul>\n\n\n\n<p class=\"note\">Note that the <code>class_exists()<\/code> is case-insensitive. It means that if you have a class with the name <code>User<\/code>, the class_exists(&#8216;user&#8217;) will return true.<\/p>\n\n\n\n<p>The <code>class_exists()<\/code> function is often used in model-view-controller (MVC) frameworks to load the controller class based on a route.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">PHP class_exists() function examples<\/h2>\n\n\n\n<p>Let&#8217;s take some examples of using the <code>class_exists()<\/code> function.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">1) Using the PHP class_exists() function to check if a class exists<\/h3>\n\n\n\n<p>First, define a class <code>User<\/code> in the <code>User.php<\/code> file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">User<\/span>\n<\/span>{\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, require the <code>User.php<\/code> file in the index.php and use the <code>class_exists()<\/code> function to check if the <code>User<\/code> class exists:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'User.php'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (class_exists(<span class=\"hljs-string\">'User'<\/span>)) {\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'The class User exists'<\/span>;\n} <span class=\"hljs-keyword\">else<\/span> {\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'The class User does not exist'<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since the <code>require<\/code> construct loads the <code>User.php<\/code> class, you&#8217;ll see the following output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">The <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">User<\/span> <span class=\"hljs-title\">exists<\/span><\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you comment the <code>require<\/code> statement and execute the script again, you&#8217;ll see the following output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">The <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">User<\/span> <span class=\"hljs-title\">does<\/span> <span class=\"hljs-title\">not<\/span> <span class=\"hljs-title\">exist<\/span><\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">2) Using the PHP class_exists() function to check if a namedspaced clas exists<\/h3>\n\n\n\n<p>First, add the <code>App<\/code> namespace to the <code>User<\/code> class:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">namespace<\/span> <span class=\"hljs-title\">App<\/span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">User<\/span>\n<\/span>{\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, execute the following script:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'User.php'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (class_exists(<span class=\"hljs-string\">'User'<\/span>)) {\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'The class User exists'<\/span>;\n} <span class=\"hljs-keyword\">else<\/span> {\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'The class User does not exist'<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>&#8230; you&#8217;ll see the following output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">The <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">User<\/span> <span class=\"hljs-title\">does<\/span> <span class=\"hljs-title\">not<\/span> <span class=\"hljs-title\">exist<\/span><\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The reason is that the <code>User<\/code> class is namespaced. The class name is <code>App\\User<\/code>, not <code>User<\/code>.<\/p>\n\n\n\n<p>To fix this, you can use the fully-qualified class name like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'User.php'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (class_exists(<span class=\"hljs-string\">'App\\User'<\/span>)) {\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'The class App\\User exists'<\/span>;\n} <span class=\"hljs-keyword\">else<\/span> {\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'The class Appp\\User does not exist'<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you execute the script again, you&#8217;ll see this output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">The <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">App<\/span>\\<span class=\"hljs-title\">User<\/span> <span class=\"hljs-title\">exists<\/span><\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">3) Using the class_exists() with the class alias<\/h3>\n\n\n\n<p>The <code>class_exists()<\/code> doesn&#8217;t work with the aliased class name. For example: <!--?php<\/p--><\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'User.php'<\/span>;\n<span class=\"hljs-keyword\">use<\/span> <span class=\"hljs-title\">App<\/span>\\<span class=\"hljs-title\">User<\/span> <span class=\"hljs-title\">as<\/span> <span class=\"hljs-title\">Account<\/span>;\nvar_dump(class_exists(<span class=\"hljs-string\">'Account'<\/span>)); <span class=\"hljs-comment\">\/\/ bool(false)    <\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">4) Using the PHP class_exists() with spl_autoload_register() example<\/h3>\n\n\n\n<p>First, define the <code>User<\/code> class in the <code>User.php<\/code> file in the <code>app<\/code> folder as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">namespace<\/span> <span class=\"hljs-title\">App<\/span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">User<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">avartar<\/span><span class=\"hljs-params\">()<\/span>: <span class=\"hljs-title\">string<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">'default'<\/span>;\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, create an <code>index.php<\/code> file in the root folder and place the following code:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\nspl_autoload_register(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-params\">($class)<\/span> <\/span>{\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'Loading the class '<\/span> . $class . <span class=\"hljs-string\">'&lt;br&gt;'<\/span>;\n    <span class=\"hljs-keyword\">require<\/span> $class . <span class=\"hljs-string\">'.php'<\/span>;\n});\n\nclass_exists(<span class=\"hljs-string\">'App\\User'<\/span>);\n<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'Create a new user'<\/span> . <span class=\"hljs-string\">'&lt;br&gt;'<\/span>;\n\n$user = <span class=\"hljs-keyword\">new<\/span> App\\User();\n<span class=\"hljs-keyword\">echo<\/span> $user-&gt;avartar();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">Loading the <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">App<\/span>\\<span class=\"hljs-title\">User<\/span>\n<span class=\"hljs-title\">Create<\/span> <span class=\"hljs-title\">a<\/span> <span class=\"hljs-title\">new<\/span> <span class=\"hljs-title\">user<\/span>\n<span class=\"hljs-title\">default<\/span><\/span>{<span class=\"hljs-string\">\"mode\"<\/span>:<span class=\"hljs-string\">\"full\"<\/span>,<span class=\"hljs-string\">\"isActive\"<\/span>:<span class=\"hljs-keyword\">false<\/span>}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, the <code>class_exists()<\/code> function checks whether the <code>App\\User<\/code> class exists and call the <code>spl_autoload_register()<\/code> function to load the <code>User.php<\/code> file from the <code>app<\/code> folder.<\/p>\n\n\n\n<p>Second, create a new instance of the class <code>App\\User<\/code> and call the <code>avartar()<\/code> method.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use the PHP <code>class_exists()<\/code> function to check if a class exists or not.<\/li><li>Use the fully-qualified name for the class if the class is namespaced.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2311\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-class_exists\/\"\n\t\t\t\tdata-post-title=\"PHP class_exists\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2311\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-class_exists\/\"\n\t\t\t\tdata-post-title=\"PHP class_exists\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to use the PHP class_exists() function to check if a class exists or not.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1753,"menu_order":37,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-2311","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2311","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=2311"}],"version-history":[{"count":3,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2311\/revisions"}],"predecessor-version":[{"id":2315,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2311\/revisions\/2315"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1753"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=2311"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}