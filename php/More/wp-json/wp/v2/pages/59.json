{"id":59,"date":"2021-03-08T00:06:44","date_gmt":"2021-03-08T00:06:44","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=59"},"modified":"2021-11-03T14:42:46","modified_gmt":"2021-11-03T14:42:46","slug":"php-operators","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-operators\/","title":{"rendered":"PHP Operators"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about PHP operators and how to use them effectively in your script.<\/p>\n\n\n\n<p>An operator takes one or more values, known as operands, and performs a specific operation on them. <\/p>\n\n\n\n<p>For example, the + operator adds two numbers and returns the sum of them.<\/p>\n\n\n\n<p>PHP supports many kinds of operators:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>Arithmetic Operators<\/li><li>Assignment Operators<\/li><li>Bitwise Operators<\/li><li>Comparison Operators<\/li><li>Increment\/Decrement Operators<\/li><li>Logical Operators<\/li><li>Concatenating Operators<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Arithmetic Operators<\/h2>\n\n\n\n<p>The arithmetic operators require numeric values. If you apply them to non-numeric values, they&#8217;ll convert them to numeric values before carrying the arithmetic operation. <\/p>\n\n\n\n<p>The following are the list of arithmetic operators:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Operator<\/th><th>Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>+<\/td><td>Addition<\/td><td>Return the sum of two operands<\/td><\/tr><tr><td>&#8211;<\/td><td>Subtraction<\/td><td>Return the difference between two operands<\/td><\/tr><tr><td>*<\/td><td>Multiplication<\/td><td>Return the product of two operands<\/td><\/tr><tr><td>\/<\/td><td>Division<\/td><td>Return the quotient of two operands<\/td><\/tr><tr><td>%<\/td><td>Modulus<\/td><td>Return the remainder of the division of the first operand by the second one<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>The following example uses the arithmetic operators:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$x = <span class=\"hljs-number\">20<\/span>;\n$y = <span class=\"hljs-number\">10<\/span>;\n\n<span class=\"hljs-comment\">\/\/ add, subtract, and multiplication operators demo<\/span>\n<span class=\"hljs-keyword\">echo<\/span> $x + $y . <span class=\"hljs-string\">'&lt;br\/&gt;'<\/span>;  <span class=\"hljs-comment\">\/\/ 30<\/span>\n<span class=\"hljs-keyword\">echo<\/span> $x - $y . <span class=\"hljs-string\">'&lt;br\/&gt;'<\/span>;  <span class=\"hljs-comment\">\/\/ 10<\/span>\n<span class=\"hljs-keyword\">echo<\/span> $x * $y . <span class=\"hljs-string\">'&lt;br\/&gt;'<\/span>;  <span class=\"hljs-comment\">\/\/ 200<\/span>\n\n<span class=\"hljs-comment\">\/\/ division operator demo<\/span>\n$z = $x \/ $y;\n<span class=\"hljs-keyword\">echo<\/span> gettype($z)  . <span class=\"hljs-string\">'&lt;br\/&gt;'<\/span>; <span class=\"hljs-comment\">\/\/  integer<\/span>\n\n$z = $y \/ $x;\n<span class=\"hljs-keyword\">echo<\/span> gettype($z)  . <span class=\"hljs-string\">'&lt;br\/&gt;'<\/span>; <span class=\"hljs-comment\">\/\/ double<\/span>\n\n<span class=\"hljs-comment\">\/\/ modulus demo<\/span>\n\n$y = <span class=\"hljs-number\">15<\/span>;\n<span class=\"hljs-keyword\">echo<\/span> $x % $y . <span class=\"hljs-string\">'&lt;br\/&gt;'<\/span>; <span class=\"hljs-comment\">\/\/ 5<\/span><\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Comparison Operators<\/h2>\n\n\n\n<p>Comparison operators allow you to compare two operands. <\/p>\n\n\n\n<p>A comparison operator&nbsp;returns&nbsp;a Boolean value, either <code>true <\/code>or <code>false<\/code>. If the comparison is truthful, the comparison operator returns <code>true<\/code>, otherwise, it returns <code>false<\/code>.<\/p>\n\n\n\n<p>The following are the list of comparison operators in PHP:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Operator<\/th><th>Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>==<\/td><td>Equality<\/td><td>Return <code>true <\/code>if both operands are equal, otherwise returns <code>false<\/code>.<\/td><\/tr><tr><td>===<\/td><td>Identity<\/td><td>Return <code>true <\/code>if both operands have the same data type and equal, otherwise return <code>false<\/code>.<\/td><\/tr><tr><td>!===<\/td><td>Not identical<\/td><td>Return <code>true <\/code>if both operands are not equal or not have the same data type, otherwise return<code>false<\/code>.<\/td><\/tr><tr><td>&gt;<\/td><td>Greater than<\/td><td>Return <code>true <\/code>if the operand on the left&nbsp; is greater than the operand on the right, otherwise return <code>false<\/code>.<\/td><\/tr><tr><td>&gt;=<\/td><td>Greater than or equal to<\/td><td>Return <code>true <\/code>if the operand on the left&nbsp; is greater than or equal to the operand on the right, otherwise return <code>false<\/code>.<\/td><\/tr><tr><td>&lt;<\/td><td>Less than<\/td><td>Return <code>true <\/code>if the operand on the left&nbsp;is less than the operand on the right, otherwise return <code>false<\/code>.<\/td><\/tr><tr><td>&lt;=<\/td><td>Less than or equal<\/td><td>Return <code>true <\/code>if the operand on the left&nbsp; is less than or equal to the operand on the right, otherwise return <code>false<\/code>.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\">Logical Operators<\/h2>\n\n\n\n<p>Logical operators allow you to construct logical expressions. A logical operator returns a Boolean value. <\/p>\n\n\n\n<p>PHP provides the following logical operators:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Operator<\/th><th>Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>&amp;&amp;<\/td><td>Logical AND<\/td><td>Return <code>true <\/code>if both operands are <code>true<\/code>, otherwise return <code>false<\/code>. If the first operand is <code>false<\/code>, it will not evaluate the second operand because it knows for sure that the result is going to be <code>false<\/code>. This is known as short-circuiting.<\/td><\/tr><tr><td>||<\/td><td>Logical OR<\/td><td>Return <code>true <\/code>if one of the operands is <code>true<\/code>, otherwise returns <code>false<\/code>. If the first operand is <code>true<\/code>, it will not evaluate the second one.<\/td><\/tr><tr><td>xor<\/td><td>Logical XOR<\/td><td>Return <code>true <\/code>if either operand, not both, is <code>true<\/code><em>, <\/em>otherwise, return <code>false<\/code><em>.<\/em><\/td><\/tr><tr><td>!<\/td><td>Not<\/td><td>returns <code>true <\/code>if the operand is <code>false<\/code><em>,<\/em> and returns <code>false <\/code>if the operand is <code>true<\/code>.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\">Bitwise Operators<\/h2>\n\n\n\n<p>Bitwise operators perform operations on the binary representation of the operands. The following illustrates bitwise operators in PHP:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Operators<\/th><th>Name<\/th><th>Result<\/th><\/tr><\/thead><tbody><tr><td><code>$x &amp; $y<\/code><\/td><td>And<\/td><td>If both bits are 1, the corresponding bit in the result is 1; otherwise, the corresponding bit is 0<\/td><\/tr><tr><td><code>$x | $y<\/code><\/td><td>Or (inclusive or)<\/td><td>If both bits are 0, the corresponding bit in the result is 0; otherwise, the corresponding bit is 1<\/td><\/tr><tr><td><code>$x ^ $y<\/code><\/td><td>Xor (exclusive or)<\/td><td>If either bit, but not both, in <code>$x<\/code>&nbsp;and <code>$y<\/code>&nbsp;are 1, the corresponding bit in the result is 1; otherwise, the corresponding bit is 0<\/td><\/tr><tr><td><code>~ $x<\/code><\/td><td>Not<\/td><td>Change bit 1 to 0 and 0 to 1 in the $x operand<\/td><\/tr><tr><td><code>$x &lt;&lt; $y<\/code><\/td><td>Shift left<\/td><td>Shifts the bits in <code>$x <\/code>left by the number of places specified by <code>$y<\/code>.<\/td><\/tr><tr><td><code>$x &gt;&gt; $y<\/code><\/td><td>Shift right<\/td><td>Shifts the bits in <code>$x<\/code>&nbsp;right by the number of places specified by <code>$y<\/code>.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\">Incrementing\/ Decrementing Operators<\/h2>\n\n\n\n<p>Increment (++)&nbsp; and decrement (&#8211;) operators give you a quick way to increase and decrease the value of a variable by 1. <\/p>\n\n\n\n<p>The following table illustrates the increment and decrement operators:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Example<\/th><th>Name<\/th><th>Returned Value<\/th><th>Effect on $a<\/th><\/tr><\/thead><tbody><tr><td><code>++$a<\/code><\/td><td>Pre-increment<\/td><td><code>$a + 1<\/code><\/td><td>Increments <code>$a<\/code>&nbsp;by 1, then returns <code>$a<\/code>.<\/td><\/tr><tr><td><code>$a++<\/code><\/td><td>Post-increment<\/td><td><code>$a<\/code><\/td><td>Returns <code>$a<\/code>, then increments <code>$a<\/code>&nbsp;by 1.<\/td><\/tr><tr><td><code>--$a<\/code><\/td><td>Pre-decrement<\/td><td><code>$a - 1<\/code><\/td><td>Decrements <code>$a<\/code>&nbsp;by 1, then returns <code>$a<\/code>.<\/td><\/tr><tr><td><code>$a--<\/code><\/td><td>Post-decrement<\/td><td><code>$a<\/code><\/td><td>Returns <code>$a<\/code>, then decrements <code>$a<\/code>&nbsp;by 1.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\">Concatenating Operator<\/h2>\n\n\n\n<p>Concatenating operator (.) allows you to combine two strings into one. It appends the second string to the first one and returns the combined string. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n$str = <span class=\"hljs-string\">'PHP'<\/span> . <span class=\"hljs-string\">' is '<\/span> . <span class=\"hljs-string\">' Awesome!'<\/span>;\n<span class=\"hljs-keyword\">echo<\/span> $str;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Assignment Operators<\/h2>\n\n\n\n<p>Assignment operator ( <code>=<\/code>) assigns a value to a variable and returns a value. The operand on the left is always a variable, while the operand on the right can be a literal value, variable, expression, or a function call that returns a value. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$x = <span class=\"hljs-number\">10<\/span>;\n$y = $x;\n$z = ($x = <span class=\"hljs-number\">20<\/span>); <span class=\"hljs-comment\">\/\/ $z = 20<\/span><\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the first expression, we assigned <code>$x<\/code>&nbsp;variable value <code>10<\/code>.&nbsp; In the second one, we assigned the value of $x&nbsp;to $y&nbsp;variable. The third one is a little bit complicated. First, we assigned <code>20 <\/code>to <code>$x<\/code>. The assignment operator ( <code>=<\/code>) returns <code>20 <\/code>and then <code>20 <\/code>is assigned to <code>$z<\/code>&nbsp;variable.<\/p>\n\n\n\n<p>Besides the basic assignment operator( <code>=<\/code>), PHP provides you with some assignment operators:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>plus-equal&nbsp; <code>+=<\/code><\/li><li>minus-equal&nbsp; <code>-=<\/code><\/li><li>divide-equal&nbsp; <code>\/=<\/code><\/li><li>multiplication-equal&nbsp; <code>*=<\/code><\/li><li>modulus-equal&nbsp; <code>%=<\/code><\/li><li>XOR-equal&nbsp; <code>^=<\/code><\/li><li>AND-equal&nbsp; <code>&amp;=<\/code><\/li><li>OR-equal&nbsp; <code>|=<\/code><\/li><li>concatenate-equal&nbsp; <code>.=<\/code><\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">PHP operators precedence<\/h2>\n\n\n\n<p>The precedence of an operator decides which order the operator is evaluated in an expression. <\/p>\n\n\n\n<p>PHP assigned each operator precedence. Some operators have the same precedence,\u00a0e.g., precedences of the addition ( <code>+<\/code>) and subtraction( <code>-<\/code>) are equal.<\/p>\n\n\n\n<p>However, some operators have higher precedence than others. <\/p>\n\n\n\n<p>For example, the precedence of the multiplication operator ( <code>*<\/code>) is higher than the precedence of the add( <code>+<\/code>) and the subtract ( <code>-<\/code>) operators:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-number\">4<\/span> + <span class=\"hljs-number\">5<\/span> * <span class=\"hljs-number\">3<\/span>; <span class=\"hljs-comment\">\/\/ 19<\/span><\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Because the precedence of the multiplication operator ( <code>*<\/code>) is higher than the precedence of the add( <code>+<\/code>) operator, PHP evaluates the multiplication operator ( <code>*<\/code>) first and then add operator ( <code>*<\/code>) second.<\/p>\n\n\n\n<p>To force the evaluation in a particular order, you put the expression inside parentheses <code>()<\/code>, for example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">echo<\/span> (<span class=\"hljs-number\">4<\/span> + <span class=\"hljs-number\">5<\/span>) * <span class=\"hljs-number\">3<\/span>; <span class=\"hljs-comment\">\/\/ 27<\/span><\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this tutorial, you have briefly learned about the most commonly used PHP operators.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"59\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-operators\/\"\n\t\t\t\tdata-post-title=\"PHP Operators\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"59\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-operators\/\"\n\t\t\t\tdata-post-title=\"PHP Operators\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about PHP operators and how to use them effectively in your script.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":17,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-59","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/59","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=59"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/59\/revisions"}],"predecessor-version":[{"id":2842,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/59\/revisions\/2842"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=59"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}