{"id":1472,"date":"2021-05-06T04:14:41","date_gmt":"2021-05-06T04:14:41","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=1472"},"modified":"2021-06-27T14:12:50","modified_gmt":"2021-06-27T14:12:50","slug":"php-strpos","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-strpos\/","title":{"rendered":"PHP strpos"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the PHP <code>strpos()<\/code> function to get the index of the first occurrence of a substring in a string.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP strpos() function<\/h2>\n\n\n\n<p>The PHP <code>strpos()<\/code> function returns the index of the first occurrence of a substring within a <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-string\/\">string<\/a>.<\/p>\n\n\n\n<p>Here&#8217;s the syntax of the <code>strpos()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">strpos ( string $haystack , string $needle , int $offset = <span class=\"hljs-number\">0<\/span> ) : int|<span class=\"hljs-keyword\">false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>strpos()<\/code> function has the following parameters:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>The <code>$haystack<\/code> is a string to search in.<\/li><li>The <code>$needle<\/code> is a string value to search for.<\/li><li>The <code>$offset<\/code> is an integer that represents the index at which the <code>strpos()<\/code> function starts the search. The <code>$offset<\/code> defaults to 0.<\/li><\/ul>\n\n\n\n<p>The <code>$offset<\/code> can be positive or negative. If <code>$offset<\/code> is positive, the <code>strpos()<\/code> function starts the search at <code>$offset<\/code> number of characters to the end of the string.<\/p>\n\n\n\n<p>If the <code>$offset<\/code> is negative, the <code>strpos()<\/code> function starts at the <code>$offset<\/code> number of characters to the beginning of the string.<\/p>\n\n\n\n<p>If the <code>strpos()<\/code> doesn&#8217;t find the <code>$needle<\/code> in the <code>$haystack<\/code>, it returns <code>false<\/code>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">PHP strpos() function examples<\/h2>\n\n\n\n<p>Let&#8217;s take some examples of using the <code>strpos()<\/code> function.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">1) Using PHP strpos() function to search for a substring example<\/h3>\n\n\n\n<p>The following example uses the <code>strpos()<\/code> function to search for the substring <code>'to'<\/code> in the string <code>'To do or not to do'<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$str = <span class=\"hljs-string\">'To do or not to do'<\/span>;\n$position = strpos($str, <span class=\"hljs-string\">'do'<\/span>);\n\n<span class=\"hljs-keyword\">echo<\/span> $position; <span class=\"hljs-comment\">\/\/ 3<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-number\">3<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"722\" height=\"250\" src=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/05\/php-strpos.png\" alt=\"php strpos\" class=\"wp-image-1481\" srcset=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/05\/php-strpos.png 722w, https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/05\/php-strpos-300x104.png 300w\" sizes=\"auto, (max-width: 722px) 100vw, 722px\" \/><\/figure>\n\n\n\n<h3 class=\"wp-block-heading\">2) Using PHP strpos() function to search for a substring with an offset example<\/h3>\n\n\n\n<p>The following example uses the <code>strpos()<\/code> function to search for the substring <code>'do'<\/code> in the string <code>'To do or not to do'<\/code> start from the index 5:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$str = <span class=\"hljs-string\">'To do or not to do'<\/span>;\n$position = strpos($str, <span class=\"hljs-string\">'do'<\/span>, <span class=\"hljs-number\">4<\/span>);\n\n<span class=\"hljs-keyword\">echo<\/span> $position;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-number\">16<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>strpos()<\/code> returns the index of the second occurrence of the <code>'do'<\/code> substring because it starts the search at index 4.<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" decoding=\"async\" width=\"721\" height=\"252\" src=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/05\/php-strpos-with-offset.png\" alt=\"PHP strpos() function with offset\" class=\"wp-image-1480\" srcset=\"https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/05\/php-strpos-with-offset.png 721w, https:\/\/www.CodeCamp\/wp-content\/uploads\/2021\/05\/php-strpos-with-offset-300x105.png 300w\" sizes=\"auto, (max-width: 721px) 100vw, 721px\" \/><\/figure>\n\n\n\n<h3 class=\"wp-block-heading\">3) Using PHP strpos() function gotchas<\/h3>\n\n\n\n<p>The following example uses the <code>strpos()<\/code> function to search for the substring <code>'To'<\/code> in the string <code>'To do or not to do'<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$str = <span class=\"hljs-string\">'To do or not to do'<\/span>;\n$position = strpos($str, <span class=\"hljs-string\">'To'<\/span>);\n\n<span class=\"hljs-keyword\">if<\/span> ($position) {\n    <span class=\"hljs-keyword\">echo<\/span> $position;\n} <span class=\"hljs-keyword\">else<\/span> {\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'Not found'<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">Not found<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The string <code>'To'<\/code> locates at the beginning of the string; therefore, the <code>strpos()<\/code> function returns 0. However, PHP evaluates 0 as <code>false<\/code>. So you see the <code>'not found'<\/code> message in the output.<\/p>\n\n\n\n<p>To avoid this issue, you should always compare the result of the <code>strpos()<\/code> function with <code>true<\/code> or <code>false<\/code> using the <code>===<\/code> or <code>!==<\/code> operator. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$str = <span class=\"hljs-string\">'To do or not to do'<\/span>;\n$position = strpos($str, <span class=\"hljs-string\">'To'<\/span>);\n\n<span class=\"hljs-keyword\">if<\/span> ($position !== <span class=\"hljs-keyword\">false<\/span>) {\n    <span class=\"hljs-keyword\">echo<\/span> $position; <span class=\"hljs-comment\">\/\/ 0<\/span>\n} <span class=\"hljs-keyword\">else<\/span> {\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'Not found'<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-number\">0<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">PHP stripos() function<\/h2>\n\n\n\n<p>The <code>stripos()<\/code> function is like the <code>strpos()<\/code> function except that it searches for the substring case-insentively. The following example returns <code>false<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$str = <span class=\"hljs-string\">'PHP is cool'<\/span>;\n$position = strpos($str, <span class=\"hljs-string\">'php'<\/span>);\n\nvar_dump($position); <span class=\"hljs-comment\">\/\/ bool(false)<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-number\">0<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To search for a substring case-insensitively, you use the <code>stripos()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$str = <span class=\"hljs-string\">'PHP is cool'<\/span>;\n$position = stripos($str, <span class=\"hljs-string\">'php'<\/span>);\n\nvar_dump($position); <span class=\"hljs-comment\">\/\/ 0<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use the <code>strpos()<\/code> function to return the index of the first occurrence of a substring in a string.<\/li><li>Use the <code>stripos()<\/code> function to search for the substring case-insensitively.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1472\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-strpos\/\"\n\t\t\t\tdata-post-title=\"PHP strpos\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1472\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-strpos\/\"\n\t\t\t\tdata-post-title=\"PHP strpos\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to use the PHP strpos() function to get the index of the first occurrence of a substring in a string.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":110,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-1472","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1472","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=1472"}],"version-history":[{"count":6,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1472\/revisions"}],"predecessor-version":[{"id":1485,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1472\/revisions\/1485"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=1472"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}