{"id":2612,"date":"2021-09-11T02:41:43","date_gmt":"2021-09-11T02:41:43","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=2612"},"modified":"2021-09-18T10:32:12","modified_gmt":"2021-09-18T10:32:12","slug":"php-regular-expressions","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-regular-expressions\/","title":{"rendered":"PHP Regular Expressions"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about PHP regular expressions and functions that work with regular expression including <code>preg_match()<\/code>, <code>preg_match_all()<\/code>, and <code>preg_replace()<\/code>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP regular expressions<\/h2>\n\n\n\n<p>PHP string functions allow you to test if a string contains a substring (<code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-str_contains\/\">str_contains()<\/a><\/code>) or to replace all occurrences of a substring with another string (<code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-str_replace\/\">str_replace()<\/a><\/code>).<\/p>\n\n\n\n<p>However, these functions deal with fixed patterns. They won&#8217;t work with flexible patterns. For example, if you want to search any numbers in a string, the <code>str_contains()<\/code> won&#8217;t work.<\/p>\n\n\n\n<p>To search or replace a string using a pattern, you use regular expressions. <\/p>\n\n\n\n<p>A regular expression is a string that describes a pattern such as phone numbers, credit card numbers, and email addresses.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Create regular expressions<\/h2>\n\n\n\n<p>To create a regular expression, you place a pattern in forward-slashes like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-string\">'\/pattern\/'<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'\/\\d+\/'<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>$pattern<\/code> is a string. Also, it is a regular expression that matches a number with one or more digits. For example, it matches the numbers 1, 20, 300, etc.<\/p>\n\n\n\n<p>Note that you&#8217;ll learn how to form flexible regular expressions in the following tutorial.<\/p>\n\n\n\n<p>The forward-slashes are delimiters. The delimiters can be one of the following characters <code>~<\/code>, <code>!<\/code>, <code>@<\/code>, <code>#<\/code>, <code>$<\/code> or braces including <code>{}<\/code>, <code>()<\/code>, <code>[]<\/code>, <code>&lt;><\/code>. The braces help improve regular expressions&#8217; readability in some cases.<\/p>\n\n\n\n<p>Note that you cannot use the alphanumeric, multi-byte, and backslashes (<code>\\<\/code>) as delimiters.<\/p>\n\n\n\n<p>The following regular expression uses the curly braces as delimiters:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'{\\d+}'<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Search strings using regular expressions<\/h2>\n\n\n\n<p>To search a string for a match to a pattern, you use the <code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-preg_match\/\">preg_match()<\/a><\/code> and <code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-preg_match_all\/\">preg_match_all()<\/a><\/code> functions.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">PHP preg_match() function<\/h3>\n\n\n\n<p>To search based on a regular expression, you use the <code>preg_match()<\/code> function. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'{\\d+}'<\/span>;\n$message = <span class=\"hljs-string\">'PHP 8 was released on November 26, 2020'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match($pattern, $message)) {\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">\"match\"<\/span>;\n} <span class=\"hljs-keyword\">else<\/span> {\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">\"not match\"<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">match<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>preg_match()<\/code> searches the <code>$message<\/code> for a match to the <code>$pattern<\/code>.<\/p>\n\n\n\n<p>The <code>preg_match()<\/code> function returns <code>1<\/code> if there is a match in the <code>$message<\/code>, <code>0<\/code> if it doesn&#8217;t, or <code>false<\/code> on failure.<\/p>\n\n\n\n<p>To get the text that matches the pattern, you add the third parameter to the <code>preg_match()<\/code> function like the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'{\\d+}'<\/span>;\n$message = <span class=\"hljs-string\">'PHP 8 was released on November 26, 2020'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match($pattern, $message, $matches)) {\n    print_r($matches);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; <span class=\"hljs-number\">8<\/span>\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>$matches<\/code> parameter contains all the matches. The <code>$matches[0]<\/code> stores the text that matches the pattern. In this example, it is the number 8.<\/p>\n\n\n\n<p>The <code>$matches[1]<\/code>, <code>$matches[2]<\/code>, &#8230; store the texts that match the first, second,&#8230; <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-capturing-groups\/\">capturing group<\/a> \u2014more on this in the <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-capturing-groups\/\">capturing group tutorial<\/a>.<\/p>\n\n\n\n<p>The <code>preg_match()<\/code> only returns the first match and stops searching as soon as it finds the first one. To find all matches, you use the <code>preg_match_all()<\/code> function.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">PHP preg_match_all() function<\/h3>\n\n\n\n<p>The <code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-preg_match_all\/\">preg_match_all()<\/a><\/code> function searches for all matches to a regular expression. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'{\\d+}'<\/span>;\n$message = <span class=\"hljs-string\">'PHP 8 was released on November 26, 2020'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $message, $matches)) {\n    print_r($matches);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; <span class=\"hljs-keyword\">Array<\/span>\n        (\n            &#91;<span class=\"hljs-number\">0<\/span>] =&gt; <span class=\"hljs-number\">8<\/span>\n            &#91;<span class=\"hljs-number\">1<\/span>] =&gt; <span class=\"hljs-number\">26<\/span>\n            &#91;<span class=\"hljs-number\">2<\/span>] =&gt; <span class=\"hljs-number\">2020<\/span>\n        )\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>preg_match_all()<\/code> puts all matches in a <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-multidimensional-array\/\">multidimensional array<\/a> with the first element contains the texts (<code>8<\/code>, <code>26<\/code>, and <code>2020<\/code>) that match the pattern.<\/p>\n\n\n\n<p>The <code>preg_match_all()<\/code> function returns the number of matches, which can be zero or a positive number.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Replace strings using regular expressions<\/h2>\n\n\n\n<p>To replace strings that match a regular expression, you use the <code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-preg_replace\/\">preg_replace()<\/a><\/code> function. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\r\n\r\n$pattern = <span class=\"hljs-string\">'\/\\d+\/'<\/span>;\r\n$message = <span class=\"hljs-string\">'PHP 8 was released on 11\/26\/2020'<\/span>;\r\n\r\n<span class=\"hljs-keyword\">echo<\/span> preg_replace($pattern, <span class=\"hljs-string\">'%d'<\/span>, $message);\r<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">PHP %d was released on %d\/%d\/%d<\/code><\/span><\/pre>\n\n\n<p>In this example, the <code>preg_replace()<\/code> function replaces all numbers in the <code>$message<\/code> with the string <code>%d<\/code>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>PHP regular expressions are strings with pattern enclosing in delimiters for example <code>\"\/pattern\/\"<\/code>.<\/li><li>The <code>preg_match()<\/code> function searches for a match to a pattern in a string.<\/li><li>The <code>preg_match_all()<\/code> function searches for all matches to a pattern in a string.<\/li><li>The <code>preg_replace()<\/code> function searches a string for matches to a pattern and replaces them with a new string or pattern.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2612\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-regular-expressions\/\"\n\t\t\t\tdata-post-title=\"PHP Regular Expressions\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2612\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-regular-expressions\/\"\n\t\t\t\tdata-post-title=\"PHP Regular Expressions\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about PHP regular expressions and functions that work with regular expression including preg_match(), preg_match_all(), and preg_replace().<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":126,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-2612","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2612","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=2612"}],"version-history":[{"count":4,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2612\/revisions"}],"predecessor-version":[{"id":2717,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2612\/revisions\/2717"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=2612"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}