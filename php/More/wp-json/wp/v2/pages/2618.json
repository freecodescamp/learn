{"id":2618,"date":"2021-09-11T04:56:44","date_gmt":"2021-09-11T04:56:44","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=2618"},"modified":"2021-09-11T05:01:39","modified_gmt":"2021-09-11T05:01:39","slug":"regex-character-classes","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/regex-character-classes\/","title":{"rendered":"Regex Character Classes"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the regex character classes and how to create regular expressions with patterns that match a set of characters.<\/p>\n\n\n\n<p>A character class is a set of characters, for example, alphabets, numbers, whitespaces.<\/p>\n\n\n\n<p>A character class allows you to create a <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-regular-expressions\/\">regular expression<\/a> with a pattern that matches a string with one or more characters in a set.<\/p>\n\n\n\n<p>Note that a character class is also known as a character set.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The digit character class<\/h2>\n\n\n\n<p>The <code>\\d<\/code> represents the digit character class that matches any single digit from 0 to 9. The following example uses the digit character class that matches any single digit in a phone number:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'\/\\d\/'<\/span>;\n$phone = <span class=\"hljs-string\">'(650)-543-2100'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $phone, $matches)) {\n    print_r($matches&#91;<span class=\"hljs-number\">0<\/span>]);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; <span class=\"hljs-number\">6<\/span>\n    &#91;<span class=\"hljs-number\">1<\/span>] =&gt; <span class=\"hljs-number\">5<\/span>\n    &#91;<span class=\"hljs-number\">2<\/span>] =&gt; <span class=\"hljs-number\">0<\/span>\n    &#91;<span class=\"hljs-number\">3<\/span>] =&gt; <span class=\"hljs-number\">5<\/span>\n    &#91;<span class=\"hljs-number\">4<\/span>] =&gt; <span class=\"hljs-number\">4<\/span>\n    &#91;<span class=\"hljs-number\">5<\/span>] =&gt; <span class=\"hljs-number\">3<\/span>\n    &#91;<span class=\"hljs-number\">6<\/span>] =&gt; <span class=\"hljs-number\">2<\/span>\n    &#91;<span class=\"hljs-number\">7<\/span>] =&gt; <span class=\"hljs-number\">1<\/span>\n    &#91;<span class=\"hljs-number\">8<\/span>] =&gt; <span class=\"hljs-number\">0<\/span>\n    &#91;<span class=\"hljs-number\">9<\/span>] =&gt; <span class=\"hljs-number\">0<\/span>\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>preg_match_all()<\/code> function returns 10 digits.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The word character class<\/h2>\n\n\n\n<p>The <code>\\w<\/code> represents the word character class. It matches a single ASCII character, including Latin alphabets, digits, and underscore (<code>_<\/code>).<\/p>\n\n\n\n<p>The following example uses the word character class to match all characters, including Latin alphabets and digits:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'\/\\w\/'<\/span>;\n$str = <span class=\"hljs-string\">'PHP 8.0'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $str, $matches)) {\n    print_r($matches&#91;<span class=\"hljs-number\">0<\/span>]);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; P\n    &#91;<span class=\"hljs-number\">1<\/span>] =&gt; H\n    &#91;<span class=\"hljs-number\">2<\/span>] =&gt; P\n    &#91;<span class=\"hljs-number\">3<\/span>] =&gt; <span class=\"hljs-number\">8<\/span>\n    &#91;<span class=\"hljs-number\">4<\/span>] =&gt; <span class=\"hljs-number\">0<\/span>\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Notice that the regular expression <code>\/\\w\/<\/code> doesn&#8217;t match the spaces and dot (<code>.<\/code>).<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The whitespace character class<\/h2>\n\n\n\n<p>The <code>\\s<\/code> matches whitespace such as a space, a tab, a newline, a carriage return, a vertical tab, and a NUL-byte:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>&#8221; &#8221; (ASCII 32 (0x20)), an ordinary space.<\/li><li>&#8220;\\t&#8221; (ASCII 9 (0x09)), a tab.<\/li><li>&#8220;\\n&#8221; (ASCII 10 (0x0A)), a new line (line feed).<\/li><li>&#8220;\\r&#8221; (ASCII 13 (0x0D)), a carriage return.<\/li><li>&#8220;\\v&#8221; (ASCII 11 (0x0B)), a vertical tab.<\/li><li>&#8220;\\0&#8221; (ASCII 0 (0x00)), the NUL-byte.<\/li><\/ul>\n\n\n\n<p>The following example uses the whitespace character class to match all spaces in a string:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'\/\\s\/'<\/span>;\n$str = <span class=\"hljs-string\">'PHP version 8.0'<\/span>;\n\n<span class=\"hljs-keyword\">echo<\/span> preg_match_all($pattern, $str, $matches);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It returns two as expected.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Inverse character classes<\/h2>\n\n\n\n<p>A character class has an inverse set with the same letter but in the uppercase:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li><code>\\D<\/code> is the inverse character class of the <code>\\d<\/code> character class, which matches any character except a digit.<\/li><li><code>\\S<\/code> is the inverse character class of the <code>\\s<\/code> character set, which matches any character except whitespace.<\/li><li><code>\\W<\/code> is the inverse character class of the <code>\\w<\/code>, which matches any character except a word character.<\/li><\/ul>\n\n\n\n<p>The following example uses the <code>\\D<\/code> character class to match any characters except digits:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'\/\\D\/'<\/span>;\n$phone = <span class=\"hljs-string\">'(650)-543-2100'<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $phone, $matches)) {\n    print_r($matches&#91;<span class=\"hljs-number\">0<\/span>]);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; (\n    &#91;<span class=\"hljs-number\">1<\/span>] =&gt; )\n    &#91;<span class=\"hljs-number\">2<\/span>] =&gt; -\n    &#91;<span class=\"hljs-number\">3<\/span>] =&gt; -\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">The dot (.) character class<\/h2>\n\n\n\n<p>The dot (<code>.<\/code>) is a special character class that matches any character but a new line.<\/p>\n\n\n\n<p>The following example uses the dot (<code>.<\/code>) character class to match any character except the new line.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$pattern = <span class=\"hljs-string\">'\/.\/'<\/span>;\n$str = <span class=\"hljs-string\">\"PHP\\n\"<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (preg_match_all($pattern, $str, $matches)) {\n    print_r($matches&#91;<span class=\"hljs-number\">0<\/span>]);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">Array<\/span>\n(\n    &#91;<span class=\"hljs-number\">0<\/span>] =&gt; P\n    &#91;<span class=\"hljs-number\">1<\/span>] =&gt; H\n    &#91;<span class=\"hljs-number\">2<\/span>] =&gt; P\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use <code>\\d<\/code> character class to match any single digit.<\/li><li>Use <code>\\w<\/code> character class to match any word character.<\/li><li>Use <code>\\s<\/code> character class to match any whitespace.<\/li><li>The <code>\\D<\/code>, <code>\\W<\/code>, <code>\\S<\/code> character class are the inverse sets of <code>\\d<\/code>, <code>\\w<\/code>, and <code>\\s<\/code> character class.<\/li><li>Use the dot character class (<code>.<\/code>) to match any character but a new line.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2618\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-character-classes\/\"\n\t\t\t\tdata-post-title=\"Regex Character Classes\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2618\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/regex-character-classes\/\"\n\t\t\t\tdata-post-title=\"Regex Character Classes\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the regex character classes and how to use them to create regular expressions with patterns that match a set of characters.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":127,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-2618","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2618","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=2618"}],"version-history":[{"count":2,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2618\/revisions"}],"predecessor-version":[{"id":2620,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2618\/revisions\/2620"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=2618"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}