{"id":1904,"date":"2021-06-03T01:53:34","date_gmt":"2021-06-03T01:53:34","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=1904"},"modified":"2021-06-03T01:53:57","modified_gmt":"2021-06-03T01:53:57","slug":"php-glob","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-glob\/","title":{"rendered":"PHP glob"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the PHP <code>glob()<\/code> function to get the list of files and directories that match a pattern.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP glob() function<\/h2>\n\n\n\n<p>The <code>glob()<\/code> function finds pathnames that match a pattern. <\/p>\n\n\n\n<p>Here&#8217;s the syntax of the <code>glob()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">glob ( string $pattern , int $flags = <span class=\"hljs-number\">0<\/span> ) : <span class=\"hljs-keyword\">array<\/span>|<span class=\"hljs-keyword\">false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>glob()<\/code> function takes two parameters:<\/p>\n\n\n\n<p>The <code>$pattern<\/code> is the pattern to match. To construct a pattern, you use the following special characters:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>Use <code>*<\/code> to match zero or more characters<\/li><li>Use <code>-<\/code> to match exactly one character<\/li><li>Use <code>[]<\/code> to match one character from a group of characters listed in the <code>[]<\/code>. To negate the matching, you use the <code>!<\/code> character as the first character in the group.<\/li><li>Use <code>\\<\/code> to escape the following characters, except when the <code>GLOB_NOESCAPE<\/code> flag is set.<\/li><\/ul>\n\n\n\n<p>The <code>$flag<\/code> is one or more options that determine the behavior of the <code>glob()<\/code> function.<\/p>\n\n\n\n<p>For example, if the <code>$flag<\/code> is <code>GLOB_MARK<\/code>, the <code>glob()<\/code> function adds a slash (<code>\/<\/code>) or backslash (<code>\\<\/code>) to each matching directory. For a complete list of valid flags, <a href=\"https:\/\/www.php.net\/manual\/en\/function.glob.php\" target=\"_blank\" rel=\"noreferrer noopener\">check the <code>glob()<\/code> function documentation<\/a>.<\/p>\n\n\n\n<p>To combine flags, you use the | character. For example: <code>GLOB_ONLYDIR|GLOB_NOSORT<\/code>.<\/p>\n\n\n\n<p>The <code>glob()<\/code> function returns an array that contains the matched files\/directories.<\/p>\n\n\n\n<p>If no files or directories match the pattern, the <code>glob()<\/code> function returns an empty array.<\/p>\n\n\n\n<p>If an error occurs, the <code>glob()<\/code> function returns an <code>false<\/code>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">PHP glob() function examples<\/h2>\n\n\n\n<p>Let&#8217;s take some examples of using the PHP <code>glob()<\/code> function.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">1) Using the PHP glob() function to list all files in a directory<\/h3>\n\n\n\n<p>The following example uses the <code>glob()<\/code> funtion to list all *.php file in the src directory:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$path = <span class=\"hljs-string\">'src\/*.php'<\/span>;\n\n$filenames = glob($path);\n\n<span class=\"hljs-keyword\">foreach<\/span> ($filenames <span class=\"hljs-keyword\">as<\/span> $filename) {\n    <span class=\"hljs-keyword\">echo<\/span> $filename . <span class=\"hljs-string\">'&lt;br&gt;'<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the pattern <code>*.php<\/code> matches any file whose extension is <code>php<\/code>.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">2) Using the PHP glob() function to calculate get the total size of files<\/h3>\n\n\n\n<p>To get the total size of files in a directory which match a pattern, you use these steps:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>First, find the matching files using the <code>glob()<\/code> function.<\/li><li>Second, get the size of each file by passing the result of the <code>glob()<\/code> function to the array_map() function.<\/li><li>Third, get the total size by passing the result of the array_map() to the array_sum() function.<\/li><\/ul>\n\n\n\n<p>The following code illustrates how to use the <code>glob()<\/code>, array_map(), and array_sum() function to find the total size of the *.php files in the src directory:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">echo<\/span> array_sum(array_map(<span class=\"hljs-string\">'filesize'<\/span>, glob(<span class=\"hljs-string\">'.\/src\/*.php'<\/span>)));<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">3) Using the PHP glob() function to include the dotfiles<\/h3>\n\n\n\n<p>The glob(&#8216;*&#8217;) ignores hidden files by default. This means that it doesn&#8217;t return the file whose name starts with a dot e.g., (<code>.gitignore<\/code>), which are known as dotfiles.<\/p>\n\n\n\n<p>If you want to match the dotfiles, you can use the <code>{.[!.],}*<\/code> as the pattern with the <code>GLOB_BRACE<\/code> flag. This pattern excludes the directories <code>.<\/code> and <code>..<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">$filenames = glob(<span class=\"hljs-string\">'{.&#91;!.],}*'<\/span>, GLOB_BRACE); \n<span class=\"hljs-keyword\">foreach<\/span> ($filenames <span class=\"hljs-keyword\">as<\/span> $filename) {\n    <span class=\"hljs-keyword\">echo<\/span> $filename . <span class=\"hljs-string\">'&lt;br&gt;'<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use the PHP <code>glob()<\/code> function to get a list of files and directories that match a pattern.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1904\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-glob\/\"\n\t\t\t\tdata-post-title=\"PHP glob\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1904\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-glob\/\"\n\t\t\t\tdata-post-title=\"PHP glob\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to use the PHP glob() function to get the list of files and directories that match a pattern.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":158,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-1904","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1904","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=1904"}],"version-history":[{"count":2,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1904\/revisions"}],"predecessor-version":[{"id":1906,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1904\/revisions\/1906"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=1904"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}