{"id":1043,"date":"2021-04-11T03:44:02","date_gmt":"2021-04-11T03:44:02","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=1043"},"modified":"2021-05-21T13:08:05","modified_gmt":"2021-05-21T13:08:05","slug":"php-set-exception-handler","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-oop\/php-set-exception-handler\/","title":{"rendered":"PHP Set Exception Handler"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to set an exception handler using the PHP <code>set_exception_handler()<\/code> function.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP set_exception_handler function<\/h2>\n\n\n\n<p>In practice, it&#8217;s very difficult to <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-try-catch\/\">catch every possible exception<\/a>. If an exception is uncaught, you&#8217;ll see the exception message on the page.<\/p>\n\n\n\n<p>PHP allows you to catch the uncaught exceptions by registering a global exception handler. <\/p>\n\n\n\n<p>The global exception handler allows you to show a user-friendly message to the users while logging the important information into a log file for troubleshooting later.<\/p>\n\n\n\n<p>To register a global exception handler, you use the <code>set_exception_handler()<\/code> function.<\/p>\n\n\n\n<p>The <code>set_exception_handler()<\/code> function accepts a callable where you can place the code to handle the uncaught exceptions. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\nset_exception_handler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-params\">($ex)<\/span> <\/span>{\n\t<span class=\"hljs-comment\">\/\/ handle the uncaught exception<\/span>\n});<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To use a global function, you can pass the function name to the <code>set_exception_handler()<\/code> function like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span> \n\nset_exception_handler(<span class=\"hljs-string\">'handle_exceptions'<\/span>);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In case you want to use a method of an <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-objects\/\">object<\/a>, you need to pass an <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-array\/\">array<\/a> with the first element is the object and the second element is the method name. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">ExceptionHandler<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">handle<\/span><span class=\"hljs-params\">(Exception $ex)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-comment\">\/\/ code to handle the exception<\/span>\n\t}\n}\n\n$handler = <span class=\"hljs-keyword\">new<\/span> ExceptionHandler();\n\nset_exception_handler(&#91;$handler, <span class=\"hljs-string\">'handle'<\/span>]);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that method of the object must be public to be used an exception handler.<\/p>\n\n\n\n<p>Similary, you can use a public <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-static-methods\/\">static method<\/a> of a class as the exception handler:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">ExceptionHandler<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-keyword\">static<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">handle<\/span><span class=\"hljs-params\">(Exception $ex)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-comment\">\/\/ code to handle the exception<\/span>\n\t\t<span class=\"hljs-comment\">\/\/ ...<\/span>\n\t}\n}\n\nset_exception_handler(&#91;<span class=\"hljs-string\">'ExceptionHandler'<\/span>, <span class=\"hljs-string\">'handle'<\/span>]);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">PHP set_exception_handler example<\/h2>\n\n\n\n<p>First, create the following directory structure with the corresponding files like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">.\n\u251c\u2500\u2500 bootstrap.php\n\u251c\u2500\u2500 index.php\n\u2514\u2500\u2500 logs\n    \u2514\u2500\u2500 errors.log<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Filename<\/th><th>Directory<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>bootstrap.php<\/td><td>.<\/td><td>contains the code for bootstrapping the application<\/td><\/tr><tr><td>index.php<\/td><td>.<\/td><td>is the entry page of the application<\/td><\/tr><tr><td>errors.log<\/td><td>logs<\/td><td>contains the logging information<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Second, add the following code to the <code>bootstrap.php<\/code> file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\nset_exception_handler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-params\">(Exception $ex)<\/span> <\/span>{\n\t<span class=\"hljs-comment\">\/\/ set default timezone<\/span>\n\tdate_default_timezone_set(<span class=\"hljs-string\">'America\/Los_Angeles'<\/span>);\n\n\t<span class=\"hljs-comment\">\/\/ get the current date &amp; time<\/span>\n\t$time = date(<span class=\"hljs-string\">'F j, Y, g:i a e O'<\/span>);\n\n\t<span class=\"hljs-comment\">\/\/ format the exception message<\/span>\n\t$message = <span class=\"hljs-string\">\"&#91;{$time}] {$ex-&gt;getMessage()}\\n\"<\/span>;\n\n\t<span class=\"hljs-comment\">\/\/ append to the error log<\/span>\n\terror_log($message, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-string\">'logs\/errors.log'<\/span>);\n\n\t<span class=\"hljs-comment\">\/\/ show a user-friendly message<\/span>\n\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'Whoops, looks like something went wrong!'<\/span>;\n});\n\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the <code>bootstrap.php<\/code> file, we set the default time zone to <code>'America\/Los_Angeles'<\/code>, get the current date and time, format the exception message, and log it into the <code>errors.log<\/code> file located in the <code>logs<\/code> directory.<\/p>\n\n\n\n<p>The second argument (<code>3<\/code>) of the <code>error_log()<\/code> function indicates that it will append the log entry in the <code>errors.log<\/code> file.<\/p>\n\n\n\n<p>Third, place the following code in the <code>index.php<\/code> file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'bootstrap.php'<\/span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">($a, $b)<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">if<\/span> (!is_numeric($a) || !is_numeric($a)) {\n\t\t<span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> InvalidArgumentException(<span class=\"hljs-string\">'Both arguments must be numeric or numeric strings'<\/span>);\n\t}\n\n\t<span class=\"hljs-keyword\">return<\/span> $a + $b;\n}\n\n<span class=\"hljs-keyword\">echo<\/span> add(<span class=\"hljs-string\">'Hi'<\/span>, <span class=\"hljs-string\">'there'<\/span>);\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>index.php<\/code> <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-require\/\">includes<\/a> the <code>bootstrap.php<\/code> file. And it defines a function called <code>add()<\/code> that returns the sum of two numbers. <\/p>\n\n\n\n<p>However, the function call <code>add('Hi', 'there')<\/code> uses string arguments instead of numbers. Therefore, it&#8217;ll <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-throw-exception\/\">throw an exception<\/a> <code>InvalidArgumentException<\/code>.<\/p>\n\n\n\n<p>Since this exception is not caught in the <code>index.php<\/code>, the global exception handler will catch it. The <code>index.php<\/code> will show the following message:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">Whoops, looks like something went wrong!<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you look at the <code>errors.log<\/code> file, you&#8217;ll find something like:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">&#91;April 10, 2021, 8:35 pm America\/Los_Angeles -0700] File: ...\\index.php, Line: 8, Message: Both arguments must be numeric or numeric strings<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use the <code>set_exception_handler()<\/code> function to register a global exception handler that handles uncaught exceptions.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1043\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-set-exception-handler\/\"\n\t\t\t\tdata-post-title=\"PHP Set Exception Handler\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1043\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-set-exception-handler\/\"\n\t\t\t\tdata-post-title=\"PHP Set Exception Handler\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to set an exception handler using the PHP set_exception_handler() function.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1753,"menu_order":34,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-1043","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1043","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=1043"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1043\/revisions"}],"predecessor-version":[{"id":1832,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1043\/revisions\/1832"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1753"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=1043"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}