{"id":2340,"date":"2021-07-21T14:16:08","date_gmt":"2021-07-21T14:16:08","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=2340"},"modified":"2021-07-21T14:16:10","modified_gmt":"2021-07-21T14:16:10","slug":"php-serialize","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-oop\/php-serialize\/","title":{"rendered":"PHP serialize"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to the PHP <code>serialize()<\/code> function to serialize an object.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP serialize() function<\/h2>\n\n\n\n<p>To serialize an <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-objects\/\">object<\/a> into a <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-string\/\">string<\/a>, you use the <code>serialize()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">serialize(mixed $value): string<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>serialize()<\/code> function returns a string that contains a byte-stream representation of the object. And you can store this string in storage such as a file or a database.<\/p>\n\n\n\n<p>For example, the following defines the <code>Customer<\/code> class:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Customer<\/span>\n<\/span>{\n\n    <span class=\"hljs-keyword\">private<\/span> $id;\n\n    <span class=\"hljs-keyword\">private<\/span> $name;\n\n    <span class=\"hljs-keyword\">private<\/span> $email;\n\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__construct<\/span><span class=\"hljs-params\">(int $id, string $name, string $email)<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">$this<\/span>-&gt;id = $id;\n        <span class=\"hljs-keyword\">$this<\/span>-&gt;name = $name;\n        <span class=\"hljs-keyword\">$this<\/span>-&gt;email = $email;\n    }\n\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getInitial<\/span><span class=\"hljs-params\">()<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">$this<\/span>-&gt;name !== <span class=\"hljs-string\">''<\/span>) {\n            <span class=\"hljs-keyword\">return<\/span> strtoupper(substr(<span class=\"hljs-keyword\">$this<\/span>-&gt;name, <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-number\">1<\/span>));\n        }\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And this illustrates how to use the <code>serialize()<\/code> function to serialize a <code>Customer<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'Customer.php'<\/span>;\n\n$customer = <span class=\"hljs-keyword\">new<\/span> Customer(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'John Doe'<\/span>, <span class=\"hljs-string\">'john.doe@example.com'<\/span>);\n$str = serialize($customer);\n\nvar_dump($str);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">string(<span class=\"hljs-number\">132<\/span>) <span class=\"hljs-string\">\"O:8:\"<\/span>Customer<span class=\"hljs-string\">\":3:{s:12:\"<\/span>Customerid<span class=\"hljs-string\">\";i:10;s:14:\"<\/span>Customername<span class=\"hljs-string\">\";s:8:\"<\/span>John Doe<span class=\"hljs-string\">\";s:15:\"<\/span>Customeremail<span class=\"hljs-string\">\";s:20:\"<\/span>john.doe@example.com<span class=\"hljs-string\">\";}\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Notice that the <code>serialize()<\/code> function only serializes the properties of the object, not the method.<\/p>\n\n\n\n<p>The following example serializes a <code>Customer<\/code> object and saves the string to a file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'Customer.php'<\/span>;\n\n$customer = <span class=\"hljs-keyword\">new<\/span> Customer(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'John Doe'<\/span>, <span class=\"hljs-string\">'john.doe@example.com'<\/span>);\n$str = serialize($customer);\n\nfile_put_contents(<span class=\"hljs-string\">'customer.dat'<\/span>, $str);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">The __sleep() magic method<\/h3>\n\n\n\n<p>The <code>serialize()<\/code> function checks if the class implements the <code>__sleep()<\/code> method. If so, it&#8217;ll execute the <code>__sleep()<\/code> method before serializing the object.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">public<\/span> __sleep(): <span class=\"hljs-keyword\">array<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>__sleep()<\/code> method returns an array that contains property names that will be serialized.<\/p>\n\n\n\n<p>If the <code>__sleep()<\/code> method doesn&#8217;t return anything, the <code>serialize()<\/code> function will serialize null value and issue an <code>E_NOTICE<\/code>.<\/p>\n\n\n\n<p>The following example illustrates how to implement the <code>__sleep()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Customer<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">private<\/span> $id;\n    <span class=\"hljs-keyword\">private<\/span> $name;\n    <span class=\"hljs-keyword\">private<\/span> $email;\n\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__construct<\/span><span class=\"hljs-params\">(int $id, string $name, string $email)<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">$this<\/span>-&gt;id = $id;\n        <span class=\"hljs-keyword\">$this<\/span>-&gt;name = $name;\n        <span class=\"hljs-keyword\">$this<\/span>-&gt;email = $email;\n    }\n\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getInitial<\/span><span class=\"hljs-params\">()<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">$this<\/span>-&gt;name !== <span class=\"hljs-string\">''<\/span>) {\n            <span class=\"hljs-keyword\">return<\/span> strtoupper(substr(<span class=\"hljs-keyword\">$this<\/span>-&gt;name, <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-number\">1<\/span>));\n        }\n    }\n\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__sleep<\/span><span class=\"hljs-params\">()<\/span>: <span class=\"hljs-title\">array<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">return<\/span> &#91;<span class=\"hljs-string\">'id'<\/span>, <span class=\"hljs-string\">'name'<\/span>];\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>__sleep()<\/code> method returns an array that contains the names of the id and name properties. And the <code>serialize()<\/code> function will only serialize the values of these properties:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'Customer.php'<\/span>;\n\n$customer = <span class=\"hljs-keyword\">new<\/span> Customer(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'John Doe'<\/span>, <span class=\"hljs-string\">'john.doe@example.com'<\/span>);\n$str = serialize($customer);\n\nvar_dump($str);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">string(<span class=\"hljs-number\">81<\/span>) <span class=\"hljs-string\">\"O:8:\"<\/span>Customer<span class=\"hljs-string\">\":2:{s:12:\"<\/span>Customerid<span class=\"hljs-string\">\";i:10;s:14:\"<\/span>Customername<span class=\"hljs-string\">\";s:8:\"<\/span>John Doe<span class=\"hljs-string\">\";}\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In practice, you would want to encrypt sensitive information such as email and credit card numbers before carrying the serialization.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The __serialize() magic method<\/h3>\n\n\n\n<p>The <code>__serialize()<\/code> method is similar to the <code>__sleep()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">public<\/span> __serialize(): <span class=\"hljs-keyword\">array<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, the <code>__serialize()<\/code> method returns an associative array of key\/value pairs representing the object&#8217;s serialized form.<\/p>\n\n\n\n<p>Also, if the <code>__serialize()<\/code> method doesn&#8217;t return an array, PHP will throw a <code>TypeError<\/code>.<\/p>\n\n\n\n<p>For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Customer<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">private<\/span> $id;\n\n    <span class=\"hljs-keyword\">private<\/span> $name;\n\n    <span class=\"hljs-keyword\">private<\/span> $email;\n\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__construct<\/span><span class=\"hljs-params\">(int $id, string $name, string $email)<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">$this<\/span>-&gt;id = $id;\n        <span class=\"hljs-keyword\">$this<\/span>-&gt;name = $name;\n        <span class=\"hljs-keyword\">$this<\/span>-&gt;email = $email;\n    }\n\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getInitial<\/span><span class=\"hljs-params\">()<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">$this<\/span>-&gt;name !== <span class=\"hljs-string\">''<\/span>) {\n            <span class=\"hljs-keyword\">return<\/span> strtoupper(substr(<span class=\"hljs-keyword\">$this<\/span>-&gt;name, <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-number\">1<\/span>));\n        }\n    }\n\n    <span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__serialize<\/span><span class=\"hljs-params\">()<\/span>: <span class=\"hljs-title\">array<\/span>\n    <\/span>{\n        <span class=\"hljs-keyword\">return<\/span> &#91;\n            <span class=\"hljs-string\">'id'<\/span> =&gt; <span class=\"hljs-keyword\">$this<\/span>-&gt;id,\n            <span class=\"hljs-string\">'name'<\/span> =&gt; <span class=\"hljs-keyword\">$this<\/span>-&gt;name,\n        ];\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following illustrates how to use the <code>serialize()<\/code> function to serialize a <code>Customer<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'Customer.php'<\/span>;\n\n$customer = <span class=\"hljs-keyword\">new<\/span> Customer(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'John Doe'<\/span>, <span class=\"hljs-string\">'john.doe@example.com'<\/span>);\n$str = serialize($customer);\n\nvar_dump($str);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If a class has both <code>__serialize()<\/code> and <code>__sleep()<\/code> method, the <code>serialize()<\/code> function calls the <code>__serialize()<\/code> method only and ignores the <code>__sleep()<\/code> method.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use the <code>serialize()<\/code> function to serialize an object into a string of byte-stream representation.<\/li><li>Use the <code>__sleep()<\/code> or <code>__serialize()<\/code> method to implement the logic before serialization.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2340\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-serialize\/\"\n\t\t\t\tdata-post-title=\"PHP serialize\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2340\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-serialize\/\"\n\t\t\t\tdata-post-title=\"PHP serialize\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to the PHP serialize() function to serialize an object.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1753,"menu_order":23,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-2340","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2340","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=2340"}],"version-history":[{"count":1,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2340\/revisions"}],"predecessor-version":[{"id":2341,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2340\/revisions\/2341"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1753"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=2340"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}