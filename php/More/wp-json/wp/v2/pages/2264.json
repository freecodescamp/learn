{"id":2264,"date":"2021-07-11T03:12:00","date_gmt":"2021-07-11T03:12:00","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=2264"},"modified":"2021-11-03T14:58:02","modified_gmt":"2021-11-03T14:58:02","slug":"php-type-hints","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-type-hints\/","title":{"rendered":"PHP Type Hints"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use PHP type hints to declare the types for function parameters and return values.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to PHP type hints<\/h2>\n\n\n\n<p>PHP is a dynamically typed language. When you <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-functions\/\">define a function<\/a>, you don&#8217;t need to declare types for <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-function-parameters\/\">parameters<\/a>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">($x, $y)<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $x + $y;\n}\n\n$result = add(<span class=\"hljs-number\">1<\/span>,<span class=\"hljs-number\">2<\/span>);\n<span class=\"hljs-keyword\">echo<\/span> $result; <span class=\"hljs-comment\">\/\/ 3<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>add()<\/code> function accepts two arguments and returns the sum of them. In this example, we pass two integers into the <code>add()<\/code> function and get the result as an integer.<\/p>\n\n\n\n<p>If you pass two floating-point numbers into the <code>add()<\/code> function, you&#8217;ll get the sum of the <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-float\/\">floats<\/a>, which is a floating-point number:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">($x, $y)<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $x + $y;\n}\n\n$result = add(<span class=\"hljs-number\">1.0<\/span>,<span class=\"hljs-number\">2.5<\/span>);\n<span class=\"hljs-keyword\">echo<\/span> $result; <span class=\"hljs-comment\">\/\/ 3.5<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>More interestingly, you can pass an integer and a numeric string into the <code>add()<\/code> function, it will return an integer:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">($x, $y)<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $x + $y;\n}\n\n$result = add(<span class=\"hljs-number\">1<\/span>,<span class=\"hljs-string\">'2'<\/span>);\n<span class=\"hljs-keyword\">echo<\/span> $result; <span class=\"hljs-comment\">\/\/ 3<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this case, the <code>add()<\/code> function implicitly coerces the numeric string <code>'2'<\/code> into the integer <code>2<\/code> because of the + operator. If PHP fails to coerce the string argument into an integer, it&#8217;ll issue an error. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">($x, $y)<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $x + $y;\n}\n\n$result = add(<span class=\"hljs-string\">'Hi'<\/span>,<span class=\"hljs-string\">'There'<\/span>);\n<span class=\"hljs-keyword\">echo<\/span> $result;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">Fatal error: Uncaught TypeError: Unsupported operand types: string + string in ...<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To enforce the types for function parameters and return value, you can use type hints.<\/p>\n\n\n\n<p class=\"note\">Note that PHP also allows you to use type hints for class properties and methods which you&#8217;ll learn in the <a href=\"https:\/\/www.CodeCamp\/php-oop\/\">PHP object-oriented programming tutorial<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">PHP type hints for function parameters<\/h2>\n\n\n\n<p>The type hints ensure that PHP will check the type of a value at the call time and throw a <code>TypeError<\/code> if there is a mismatch.<\/p>\n\n\n\n<p>To add a type hint to a parameter, you place a type in front of it like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">my_function<\/span><span class=\"hljs-params\">(type $param1, type param2, ...)<\/span> <\/span>{\n   <span class=\"hljs-comment\">\/\/ ...<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In PHP 5, you can use <code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-array\/\">array<\/a><\/code>, <code>callable<\/code>, and <a href=\"https:\/\/www.CodeCamp\/php-oop\/php-objects\/\">class<\/a> for type hints. In PHP 7+, you can also use scalar types such as <code>bool<\/code>, <code>float<\/code>, <code>int<\/code>, and <code>string<\/code>.<\/p>\n\n\n\n<p>The following defines the <code>add()<\/code> function that accepts two integers:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">(int $x, int $y)<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $x + $y;\n}\n\n$result = add(<span class=\"hljs-number\">1<\/span>,<span class=\"hljs-number\">2<\/span>);\n<span class=\"hljs-keyword\">echo<\/span> $result;  <span class=\"hljs-comment\">\/\/ 3<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, if you pass two floats, you&#8217;ll get the result as an integer:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">(int $x, int $y)<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $x + $y;\n}\n\n$result = add(<span class=\"hljs-number\">1<\/span>,<span class=\"hljs-number\">2.5<\/span>);\n<span class=\"hljs-keyword\">echo<\/span> $result; <span class=\"hljs-comment\">\/\/ 3<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this case, PHP implicitly coerces <code>2.5<\/code> into an integer (<code>2<\/code>) before calculating the sum. Therefore, the result is an integer.<\/p>\n\n\n\n<p>By default, PHP coerces a value of the compatible type into the expected scalar type declaration if possible. To enforce the value with a type that matches the type declaration, you need to <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-strict_types\/\">declare strict typing<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">PHP type hints for function&#8217;s return value<\/h2>\n\n\n\n<p>To specify a return value&#8217;s type for a function, you add the type after the function header like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">my_function<\/span><span class=\"hljs-params\">(type $param1, type $param2, ...)<\/span> : <span class=\"hljs-title\">type<\/span> \n<\/span>{\n    <span class=\"hljs-comment\">\/\/ ..<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following example defines the <code>add()<\/code> function that accepts two integers and returns an integer:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">(int $x, int $y)<\/span>: <span class=\"hljs-title\">int<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $x + $y;\n}\n\n<span class=\"hljs-keyword\">echo<\/span> add(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Starting from PHP 7.0, if a function doesn&#8217;t return a value, you use the <code>void<\/code> type. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">dd<\/span><span class=\"hljs-params\">($data)<\/span>:<span class=\"hljs-title\">void<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'&lt;pre&gt;'<\/span>;\n    var_dump($data);\n    <span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">'&lt;\/pre&gt;'<\/span>;\n    <span class=\"hljs-keyword\">die<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">The union type<\/h2>\n\n\n\n<p>Starting from PHP 8.0, if a function returns a value of several types, you can declare it as a union type. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">($x, $y)<\/span>: <span class=\"hljs-title\">int<\/span> | <span class=\"hljs-title\">float<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> $x * $y;\n}\n\n<span class=\"hljs-keyword\">echo<\/span> add(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>); <span class=\"hljs-comment\">\/\/ 200 (int) <\/span>\n<span class=\"hljs-keyword\">echo<\/span> add(<span class=\"hljs-number\">1.5<\/span>, <span class=\"hljs-number\">2.5<\/span>); <span class=\"hljs-comment\">\/\/ 3.75 (float)<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>add()<\/code> function returns an integer or a floating-point number, depending on the types of arguments.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The mixed type<\/h2>\n\n\n\n<p>If a function returns a value of many types, you can use the mixed type. The mixed type means one of several types. The mixed type. It&#8217;s equivalent to the following union type:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">object|resource|<span class=\"hljs-keyword\">array<\/span>|string|int|float|bool|<span class=\"hljs-keyword\">null<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The mixed has been available since PHP 8.0.0.<\/p>\n\n\n\n<p>For example, the filter_var() built-in function use both union type (array|int) and mixed type as the type hints:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">filter_var(mixed $value, int $filter = FILTER_DEFAULT, <span class=\"hljs-keyword\">array<\/span>|int $options = <span class=\"hljs-number\">0<\/span>): mixed<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">The nullable type<\/h2>\n\n\n\n<p>The following defines a function that accepts a string and returns the uppercase of that string:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">upper<\/span><span class=\"hljs-params\">(string $str)<\/span>: <span class=\"hljs-title\">string<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> strtoupper($str);\n}\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you pass an argument with null, you&#8217;ll get an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">upper<\/span><span class=\"hljs-params\">(string $str)<\/span>: <span class=\"hljs-title\">string<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> strtoupper($str);\n}\n\n$str = <span class=\"hljs-keyword\">null<\/span>;\n<span class=\"hljs-keyword\">echo<\/span> upper($str);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">Fatal error: Uncaught TypeError: Argument 1 passed to upper() must be of the type string, null given<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To fix this, you can make the $str parameter nullable like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">upper<\/span><span class=\"hljs-params\">(?string $str)<\/span>: <span class=\"hljs-title\">string<\/span>\n<\/span>{\n    <span class=\"hljs-keyword\">return<\/span> strtoupper($str);\n}\n\n$str = <span class=\"hljs-keyword\">null<\/span>;\n<span class=\"hljs-keyword\">echo<\/span> upper($str);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The nullable type was introduced in PHP 7.1. <\/p>\n\n\n\n<p>PHP allows you to mark the type declarations and returns values as nullable by prefixing the type name with a question mark (<code>?<\/code>). <\/p>\n\n\n\n<p>In the above example, we add the <code>?<\/code> to the string type of the <code>$str<\/code> parameter. The <code>?string<\/code> allows you to pass a string argument or null.<\/p>\n\n\n\n<p>Note that the mixed type already includes the null type. Therefore, you don&#8217;t need to include nullable mixed like this:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">? mixed<\/code><\/span><\/pre>\n\n\n<p>Also, doing so will result in an error.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use PHP type hints for function parameters and return types.<\/li><li>Use <code>void<\/code> type if the function doesn&#8217;t return any value.<\/li><li>Use <code>mixed<\/code> type or union type if function parameter or function return value expect on of several types.<\/li><li>To make a type nullable, prefix the type with a question mark (<code>?type<\/code>).<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2264\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-type-hints\/\"\n\t\t\t\tdata-post-title=\"PHP Type Hints\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2264\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-type-hints\/\"\n\t\t\t\tdata-post-title=\"PHP Type Hints\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about PHP type hints that declare the type for function parameters and return value.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":39,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-2264","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2264","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=2264"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2264\/revisions"}],"predecessor-version":[{"id":2603,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/2264\/revisions\/2603"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=2264"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}