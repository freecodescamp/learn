{"id":1134,"date":"2021-04-15T01:23:17","date_gmt":"2021-04-15T01:23:17","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=1134"},"modified":"2021-09-04T07:08:05","modified_gmt":"2021-09-04T07:08:05","slug":"php-filter_input","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-tutorial\/php-filter_input\/","title":{"rendered":"PHP filter_input"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the PHP <code>filter_input()<\/code> function to get an external variable by name and filter it.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to PHP filter_input() function<\/h2>\n\n\n\n<p>The PHP <code>filter_input()<\/code> function allows you to get an external variable by its name and filter it using one or more built-in filters.<\/p>\n\n\n\n<p>The following shows the syntax of the <code>filter_input()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">filter_input ( int $type , string $var_name , int $filter = FILTER_DEFAULT , <span class=\"hljs-keyword\">array<\/span>|int $options = <span class=\"hljs-number\">0<\/span> ) : mixed<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>filter_input()<\/code> function has the following parameters:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li><code>$type<\/code> is one of <code>INPUT_GET<\/code>, <code>INPUT_POST<\/code>, <code>INPUT_COOKIE<\/code>, <code>INPUT_SERVER<\/code>, and <code>INPUT_ENV<\/code>.<\/li><li><code>$var_name<\/code> is the name of the variable to filter.<\/li><li><code>$filter<\/code> is the filter id to apply. Here&#8217;s the list of valid <a href=\"https:\/\/www.php.net\/manual\/en\/filter.filters.php\" target=\"_blank\" rel=\"noreferrer noopener\">filters<\/a>. If you omit the <code>$filter<\/code> argument, the <code>filter_input()<\/code> function will use the <code>FILTER_DEFAULT<\/code> filter id, which doesn&#8217;t filter anything.<\/li><li><code>$options<\/code> is an <a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-associative-arrays\/\">associative array<\/a> that consists of one or more options. When a filter accepts the options, you can use one or more flags. If you want to use multiple flags, you need to separate them by the (<code>|<\/code>) e.g., <code>FILTER_SANITIZE_ENCODED | FILTER_SANITIZE_SPECIAL_CHARS<\/code>.<\/li><\/ul>\n\n\n\n<p>The <code>filter_input()<\/code> function returns <code>null<\/code>, <code>false<\/code>, or the filtered value according to the following rules:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li>If the <code>$var_name<\/code> is not set, the <code>filte_input()<\/code> function returns <code>null<\/code>. <\/li><li>If the filter fails, the <code>filter_input()<\/code> function returns <code>false<\/code>. <\/li><li>Otherwise, it returns the filtered value of the requested variable.<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">PHP filter_input() function example<\/h2>\n\n\n\n<p>The following example uses the <code>filter_input()<\/code> function to sanitize data for a search form:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$term_html = filter_input(INPUT_GET, <span class=\"hljs-string\">'term'<\/span>, FILTER_SANITIZE_SPECIAL_CHARS);\n$term_url = filter_input(INPUT_GET, <span class=\"hljs-string\">'term'<\/span>, FILTER_SANITIZE_ENCODED);\n\n<span class=\"hljs-meta\">?&gt;<\/span><\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form<\/span> <span class=\"hljs-attr\">action<\/span>=<span class=\"hljs-string\">\"search.php\"<\/span> <span class=\"hljs-attr\">method<\/span>=<span class=\"hljs-string\">\"get\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label<\/span> <span class=\"hljs-attr\">for<\/span>=<span class=\"hljs-string\">\"term\"<\/span>&gt;<\/span> Search <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">label<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"search\"<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"term\"<\/span> <span class=\"hljs-attr\">id<\/span>=<span class=\"hljs-string\">\"term\"<\/span> <span class=\"hljs-attr\">value<\/span>=<span class=\"hljs-string\">\"&lt;?php echo $term_html ?&gt;\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"submit\"<\/span> <span class=\"hljs-attr\">value<\/span>=<span class=\"hljs-string\">\"Search\"<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">form<\/span>&gt;<\/span>\n\n<span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">null<\/span> !== $term_html) {\n\t<span class=\"hljs-keyword\">echo<\/span> <span class=\"hljs-string\">\"The search result for &lt;mark&gt; $term_html &lt;\/mark&gt;.\"<\/span>;\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How the form works.<\/p>\n\n\n\n<p>The form contains an input with type <code>search<\/code> and a submit button. <\/p>\n\n\n\n<p>When you enter a search term, e.g., <code>how to use the filter_input function<\/code> and click the submit button; the form uses the GET method to append the term query string to the URL, e.g.,<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">http:&#47;&#47;localhost\/search.php?term=how+to+use+the+filter_input+function<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This search form submits to itself (<code>search.php<\/code>). <\/p>\n\n\n\n<p>The <code>filter_input()<\/code> function sanitizes the search term using the <code>FILTER_SANITIZE_SPECIAL_CHARS<\/code> and <code>FILTER_SANITIZE_ENCODED<\/code> filters.<\/p>\n\n\n\n<p>The <code>FILTER_SANITIZE_SPECIAL_CHARS<\/code> filter returns a value for showing on the search field and the <code>FILTER_SANITIZE_ENCODED<\/code> filter returns a value for displaying on the page.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">filter_input vs. filter_var<\/h2>\n\n\n\n<p>If a variable doesn&#8217;t exist, the <code>filter_input()<\/code> function returns <code>null<\/code> while the <code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-filter_var\/\">filter_var()<\/a><\/code> function returns an empty string and issues a notice of an undefined index.<\/p>\n\n\n\n<p>Suppose you have a page with the following URL:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">http:<span class=\"hljs-comment\">\/\/localhost\/search.php<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following <code>filter_input()<\/code> function returns <code>null<\/code> and doesn&#8217;t raise any error when you get the <code>term<\/code> variable from the INPUT_GET:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$term = filter_input(INPUT_GET, <span class=\"hljs-string\">'term'<\/span>, FILTER_SANITIZE_SPECIAL_CHARS);\n\nvar_dump($term);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">NULL<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, the <code>filter_var()<\/code> function returns an empty string and issues an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$term = filter_var($_GET&#91;<span class=\"hljs-string\">'term'<\/span>], FILTER_SANITIZE_SPECIAL_CHARS);\nvar_dump($term);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">Notice: Undefined index: term in ...\\search.php on line 3\nstring(0) \"\"<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Therefore, you often use the <code>isset()<\/code> or <code><a href=\"https:\/\/www.CodeCamp\/php-tutorial\/php-filter_has_var\/\">filter_has_var()<\/a><\/code> function to check if a variable is set before passing it to the <code>filter_var()<\/code> function like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\r\n\r\n<span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">isset<\/span>($_GET&#91;<span class=\"hljs-string\">'term'<\/span>])) {\r\n    $term = filter_var($_GET&#91;<span class=\"hljs-string\">'term'<\/span>], FILTER_SANITIZE_SPECIAL_CHARS);\r\n    var_dump($term);\r\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Also, the <code>filter_input()<\/code> function doesn&#8217;t get the current values of the <code>$_GET<\/code>, <code>$_POST<\/code>, &#8230; superglobal variables. Instead, it uses the original values submitted in the HTTP request. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php<\/span>\r\n\r\n$_GET&#91;<span class=\"hljs-string\">'term'<\/span>] = <span class=\"hljs-string\">'PHP'<\/span>; <span class=\"hljs-comment\">\/\/ doesn't have any effect on INPUT_GET<\/span>\r\n$term = filter_input(INPUT_GET, <span class=\"hljs-string\">'term'<\/span>, FILTER_SANITIZE_SPECIAL_CHARS);\r\n\r\nvar_dump($term);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">NULL<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This example attempts to assign a value to the <code>$_GET['term']<\/code> variable. However, the <code>filter_input()<\/code> doesn&#8217;t read the term from the current <code>$_GET<\/code> variable. Therefore, the script displays NULL.<\/p>\n\n\n\n<p>On the other hand, the <code>filter_var()<\/code> function does read values from the current <code>$_GET<\/code> variable. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n$_GET&#91;<span class=\"hljs-string\">'term'<\/span>] = <span class=\"hljs-string\">'PHP'<\/span>;\n$term = filter_var($_GET&#91;<span class=\"hljs-string\">'term'<\/span>], FILTER_SANITIZE_SPECIAL_CHARS);\n\nvar_dump($term);<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">string(<span class=\"hljs-number\">3<\/span>) <span class=\"hljs-string\">\"PHP\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>Use the PHP <code>filter_input()<\/code> function to sanitze and validate data from external variables.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1134\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-filter_input\/\"\n\t\t\t\tdata-post-title=\"PHP filter_input\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1134\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-tutorial\/php-filter_input\/\"\n\t\t\t\tdata-post-title=\"PHP filter_input\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to use the PHP filter_input() function to filter and validate data.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":15,"menu_order":86,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-1134","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1134","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=1134"}],"version-history":[{"count":5,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1134\/revisions"}],"predecessor-version":[{"id":2523,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1134\/revisions\/2523"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/15"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=1134"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}