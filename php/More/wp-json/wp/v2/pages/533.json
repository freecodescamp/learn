{"id":533,"date":"2021-03-19T10:08:32","date_gmt":"2021-03-19T10:08:32","guid":{"rendered":"https:\/\/www.CodeCamp\/?page_id=533"},"modified":"2021-06-27T05:03:51","modified_gmt":"2021-06-27T05:03:51","slug":"php-__call","status":"publish","type":"page","link":"https:\/\/www.CodeCamp\/php-oop\/php-__call\/","title":{"rendered":"PHP __call"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the PHP <code>__call()<\/code> magic method and how to use it to wrap existing functions.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the PHP __call magic method<\/h2>\n\n\n\n<p>The <code>__call()<\/code> method is invoked automatically when a non-existing method or inaccessible method is called.  The following shows the syntax of the <code>__call()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">public<\/span> __call ( string $name , <span class=\"hljs-keyword\">array<\/span> $arguments ) : mixed<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>__call()<\/code> method accepts two arguments:<\/p>\n\n\n\n<ul class=\"wp-block-list\"><li><code>$name<\/code> is the name of the method that is being called by the object.<\/li><li><code>$arguments<\/code> is an array of arguments passed to the method call.<\/li><\/ul>\n\n\n\n<p>The <code>__call()<\/code> method is useful when you want to create a wrapper class that wraps the existing API.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">PHP __call() magic method example<\/h2>\n\n\n\n<p>Suppose that you want to develop the <code>Str<\/code> class that wraps existing string functions such as <code>strlen()<\/code>, <code>strtoupp()<\/code>, <code>strtolower()<\/code>, etc.<\/p>\n\n\n\n<p>Typically, you can define the method explicitly like length, upper, lower, &#8230; But you can use utilize the <code>__call()<\/code> magic method to make the code shorter.<\/p>\n\n\n\n<p>The following defines the Str class that uses the <code>__call()<\/code> magic method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Str<\/span>\n<\/span>{\n\t<span class=\"hljs-keyword\">private<\/span> $s = <span class=\"hljs-string\">''<\/span>;\n\n\t<span class=\"hljs-keyword\">private<\/span> $functions = &#91;\n\t\t<span class=\"hljs-string\">'length'<\/span> =&gt; <span class=\"hljs-string\">'strlen'<\/span>,\n\t\t<span class=\"hljs-string\">'upper'<\/span> =&gt; <span class=\"hljs-string\">'strtoupper'<\/span>,\n\t\t<span class=\"hljs-string\">'lower'<\/span> =&gt; <span class=\"hljs-string\">'strtolower'<\/span>\n\t\t<span class=\"hljs-comment\">\/\/ map more method to functions<\/span>\n\t];\n\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__construct<\/span><span class=\"hljs-params\">(string $s)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">$this<\/span>-&gt;s = $s;\n\t}\n\n\t<span class=\"hljs-keyword\">public<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">__call<\/span><span class=\"hljs-params\">($method, $args)<\/span>\n\t<\/span>{\n\t\t<span class=\"hljs-keyword\">if<\/span> (!in_array($method, array_keys(<span class=\"hljs-keyword\">$this<\/span>-&gt;functions))) {\n\t\t\t<span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> BadMethodCallException();\n\t\t}\n\n\t\tarray_unshift($args, <span class=\"hljs-keyword\">$this<\/span>-&gt;s);\n\n\t\t<span class=\"hljs-keyword\">return<\/span> call_user_func_array(<span class=\"hljs-keyword\">$this<\/span>-&gt;functions&#91;$method], $args);\n\t}\n}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>The <code>$functions<\/code> property store the mapping between the methods and built-in string function.  For example, if you call the <code>length()<\/code> method, the <code>__call()<\/code> method will call the <code>strlen()<\/code> function.<\/p>\n\n\n\n<p>When you call a method on an object of the Str class and that method doesn&#8217;t exist e.g., <code>length()<\/code>, PHP will invoke the <code>__call()<\/code> method.<\/p>\n\n\n\n<p>The <code>__call()<\/code> method will raise a <code>BadMethodCallException<\/code> if the method is not supported. Otherwise, it&#8217;ll add the string to the argument list before calling the corresponding function.<\/p>\n\n\n\n<p>The following shows how to uses the <code>Str<\/code> class:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php<\/span>\n\n<span class=\"hljs-keyword\">require<\/span> <span class=\"hljs-string\">'Str.php'<\/span>;\n\n$s = <span class=\"hljs-keyword\">new<\/span> Str(<span class=\"hljs-string\">'Hello, World!'<\/span>);\n\n<span class=\"hljs-keyword\">echo<\/span> $s-&gt;upper() . <span class=\"hljs-string\">'&lt;br&gt;'<\/span>; <span class=\"hljs-comment\">\/\/ HELLO, WORLD!<\/span>\n<span class=\"hljs-keyword\">echo<\/span> $s-&gt;lower() . <span class=\"hljs-string\">'&lt;br&gt;'<\/span>; <span class=\"hljs-comment\">\/\/ hello, world!<\/span>\n<span class=\"hljs-keyword\">echo<\/span> $s-&gt;length() . <span class=\"hljs-string\">'&lt;br&gt;'<\/span>; <span class=\"hljs-comment\">\/\/ 13<\/span>\n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">HELLO, WORLD!\nhello, world!\n13<\/code><\/span><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul class=\"wp-block-list\"><li>The <code>__call()<\/code> method is invoked automatically when a nonexisting method or an inaccessible method is called.<\/li><li>Use the <code>__call()<\/code> method to wrap existing API into a class.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial useful?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"533\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-__call\/\"\n\t\t\t\tdata-post-title=\"PHP __call\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"533\"\n\t\t\t\tdata-post-url=\"https:\/\/www.CodeCamp\/php-oop\/php-__call\/\"\n\t\t\t\tdata-post-title=\"PHP __call\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\n\t\t\t<button class=\"btn btn-primary wth-btn-submit\">Send<\/button>\n\t\t\t<button class=\"btn wth-btn-cancel\">Cancel<\/button>\n\t\t\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>in this tutorial, you will learn about the PHP __call() magic method and how to use it to wrap existing functions.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1753,"menu_order":20,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"class_list":["post-533","page","type-page","status-publish","hentry"],"_links":{"self":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/533","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/comments?post=533"}],"version-history":[{"count":4,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/533\/revisions"}],"predecessor-version":[{"id":2046,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/533\/revisions\/2046"}],"up":[{"embeddable":true,"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/pages\/1753"}],"wp:attachment":[{"href":"https:\/\/www.CodeCamp\/wp-json\/wp\/v2\/media?parent=533"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}